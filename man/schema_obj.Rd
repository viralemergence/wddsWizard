% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wdds_schema.R
\name{schema_obj}
\alias{schema_obj}
\title{Schema Object}
\value{
List of of data frames.
Create a list from a schema object

Creates a data.frame with the fields name and type

data frame with type and name
Get schema references

Parses $ref calls in a schema. Can retrieve internal ('"$ref":"#/definitions/someDef") or
external references ('"$ref":"schemas/datacite/datacite.json"').

For external references, it can handle both pointers and references to entire schemas.
This function navigates between parent and child schemas by manipulating
variables in the package environment \code{the}.

data frame with name or type.
Process Array Items

Processes array items so they can be added to a data frame.

data frames with name and type for array items that are objects or character strings atomic (string, null, Boolean, etc) array items.
}
\description{
A class for getting schema properties.
}
\seealso{
Other Schema: 
\code{\link{datacite_schema}},
\code{\link{disease_data_schema}},
\code{\link{project_metadata_schema}},
\code{\link{schema_properties}},
\code{\link{schema_terms}},
\code{\link{wdds_schema}}
}
\concept{Schema}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{schema_path}}{(\code{character(1)})\cr
path to the schema file.}

\item{\code{schema_list_out}}{(\code{list()})\cr
List of data frames with schema properties.}

\item{\code{wdds_version}}{(\code{character(1)})\cr
version of wdds used}

\item{\code{current_schema_path}}{(\code{character(1)})\cr
current schema file path}

\item{\code{current_schema_dir}}{(\code{character(1)})\cr
current schema directory path}

\item{\code{current_sub_schema_dir}}{(\code{character(1)})\cr
current sub schema directory path}

\item{\code{parent_schema_path}}{(\code{character(1)})\cr
parent schema file path}

\item{\code{parent_schema_dir}}{(\code{character(1)})\cr
parent schema directory}

\item{\code{array_items}}{(\code{c()})\cr
array items}

\item{\code{array_items_skip}}{(\code{logical(1)})\cr
array items to skip}

\item{\code{array_items_parent}}{(\code{logical(1)})\cr
parent array items}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-schema_obj-new}{\code{schema_obj$new()}}
\item \href{#method-schema_obj-create_schema_list}{\code{schema_obj$create_schema_list()}}
\item \href{#method-schema_obj-create_object_list}{\code{schema_obj$create_object_list()}}
\item \href{#method-schema_obj-get_ref_list}{\code{schema_obj$get_ref_list()}}
\item \href{#method-schema_obj-process_array_items}{\code{schema_obj$process_array_items()}}
\item \href{#method-schema_obj-clone}{\code{schema_obj$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-schema_obj-new"></a>}}
\if{latex}{\out{\hypertarget{method-schema_obj-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{schema_obj$new(schema_path, wdds_version = "latest")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{schema_path}}{Character. File path for the schema (\code{character(1)})\cr}

\item{\code{wdds_version}}{Character. Version of wdds used (\code{character(1)})\cr}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-schema_obj-create_schema_list"></a>}}
\if{latex}{\out{\hypertarget{method-schema_obj-create_schema_list}{}}}
\subsection{Method \code{create_schema_list()}}{
Create an expanded schema object

Produces a list of data frame with name and type for the schema.
This is a recursive set of function and may be expanded to get other properties.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{schema_obj$create_schema_list(schema_path = self$current_schema_path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{schema_path}}{Character. Path to a json-schema. Default is the current
schema path from the package environment,}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-schema_obj-create_object_list"></a>}}
\if{latex}{\out{\hypertarget{method-schema_obj-create_object_list}{}}}
\subsection{Method \code{create_object_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{schema_obj$create_object_list(x, idx, schema_dir)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{List. Schema property or definition}

\item{\code{idx}}{Name from schema property}

\item{\code{schema_dir}}{Character. directory where the schema is stored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-schema_obj-get_ref_list"></a>}}
\if{latex}{\out{\hypertarget{method-schema_obj-get_ref_list}{}}}
\subsection{Method \code{get_ref_list()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{schema_obj$get_ref_list(x, schema_dir)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{List. Must have property "$ref"}

\item{\code{schema_dir}}{Character. Directory for the current schema.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-schema_obj-process_array_items"></a>}}
\if{latex}{\out{\hypertarget{method-schema_obj-process_array_items}{}}}
\subsection{Method \code{process_array_items()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{schema_obj$process_array_items(array_items, out)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{array_items}}{list. List of array items for processing.}

\item{\code{out}}{data frame. Data frame with name and type.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-schema_obj-clone"></a>}}
\if{latex}{\out{\hypertarget{method-schema_obj-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{schema_obj$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
