[{"path":"https://viralemergence.github.io/wddsWizard/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 wddsWizard authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"required-fields","dir":"Articles","previous_headings":"","what":"Required fields","title":"Wildlife Disease Data","text":"following fields required data.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"read-in-and-clean-up-the-excel-spreadsheet","dir":"Articles","previous_headings":"","what":"Read in and Clean up the excel spreadsheet","title":"Wildlife Disease Data","text":"","code":"## read  becker_data <- readxl::read_xlsx(path = here::here(\"inst/extdata/example_data/Becker_demo_dataset.xlsx\"))  becker_data_prelim <- janitor::clean_names(becker_data,case = \"lower_camel\")"},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"check-for-required-fields","dir":"Articles","previous_headings":"Read in and Clean up the excel spreadsheet","what":"Check for required Fields","title":"Wildlife Disease Data","text":"","code":"# check that required fields are in dataset required_field_check <- wddsWizard::data_required_fields %in% names(becker_data_prelim)  wddsWizard::data_required_fields[!required_field_check] #> [1] \"sampleID\"                    \"animalID\"                    #> [3] \"collectionMethodAndOrTissue\""},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"rename-fields-to-match-standard","dir":"Articles","previous_headings":"Read in and Clean up the excel spreadsheet","what":"Rename Fields to match standard","title":"Wildlife Disease Data","text":"","code":"becker_data_prelim$collectionMethod #> [1] \"Oral swab\"   \"Rectal swab\"  becker_data_clean <- becker_data_prelim |>   dplyr::rename(     \"sampleID\" = \"sampleId\",     \"animalID\" = \"animalId\",     \"collectionMethodAndOrTissue\" = \"collectionMethod\"   )  # check that all required fields are in the data all(wddsWizard::data_required_fields %in% names(becker_data_clean)) #> [1] TRUE"},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"prep-for-json","dir":"Articles","previous_headings":"","what":"Prep for JSON","title":"Wildlife Disease Data","text":"","code":"becker_prepped <- prep_data(becker_data_clean)  ## wrap the prepped data in list becker_data <- list(data = becker_prepped)  jsonlite::toJSON(becker_data,pretty = TRUE) #> { #>   \"data\": { #>     \"sampleID\": [\"OS BZ19-95\", \"RS BZ19-95\"], #>     \"animalID\": [\"BZ19-114\", \"BZ19-114\"], #>     \"latitude\": [17.7643, 17.7643], #>     \"longitude\": [-88.6521, -88.6521], #>     \"collectionDay\": [23, 23], #>     \"collectionMonth\": [4, 4], #>     \"collectionYear\": [2019, 2019], #>     \"collectionMethodAndOrTissue\": [\"Oral swab\", \"Rectal swab\"], #>     \"hostIdentification\": [\"Desmodus rotundus\", \"Desmodus rotundus\"], #>     \"organismSex\": [\"male\", \"male\"], #>     \"deadOrAlive\": [\"alive\", \"alive\"], #>     \"hostLifeStage\": [\"subadult\", \"subadult\"], #>     \"mass\": [0.023, 0.023], #>     \"massUnits\": [\"kg\", \"kg\"], #>     \"detectionTarget\": [\"Coronaviridae\", \"Coronaviridae\"], #>     \"detectionMethod\": [\"semi-nested PCR\", \"semi-nested PCR\"], #>     \"primerSequence\": [\"RdRp\", \"RdRp\"], #>     \"primerCitation\": [\"doi:10.3390/v9120364\", \"doi:10.3390/v9120364\"], #>     \"detectionOutcome\": [\"positive\", \"negative\"], #>     \"parasiteIdentification\": [\"Alphacoronavirus\", null], #>     \"genBankAccession\": [\"OM240578\", null] #>   } #> }"},{"path":"https://viralemergence.github.io/wddsWizard/articles/project_metadata.html","id":"load-in-the-csv-and-clean-it-up","dir":"Articles","previous_headings":"","what":"Load in the CSV and clean it up","title":"Project Metadata","text":"example data requires light cleaning make transforming csv easier.","code":"project_metadata <- read.csv(\"../inst/extdata/example_data/example_project_metadata.csv\")  ## turn empty strings into NAs in the group field project_metadata <- project_metadata |>   dplyr::mutate(Group = dplyr::case_when(     Group != \"\" ~ Group,     TRUE ~ NA   ))   ## use `fill` to complete the items column and `mutate` to make groups a little ## more ergonomic   project_metadata_filled <- tidyr::fill(data = project_metadata,Group)"},{"path":"https://viralemergence.github.io/wddsWizard/articles/project_metadata.html","id":"restructure-data","dir":"Articles","previous_headings":"","what":"Restructure data","title":"Project Metadata","text":"validation schema expecting JSON, restructure data list can converted JSON. Creators, Resources, Funding References, possible multiple entities group. example data, two creators three funding references. need pull entity_ids creators funding references clean Group field can used general category Creators, Resources, Funding References.","code":"# get ids for components of a group. project_metadata_ids <- project_metadata_filled |>   dplyr::mutate(     entity_id = stringr::str_extract(string = Group,pattern = \"[0-9]\"),     # make sure that there are no NA entity IDs     entity_id = dplyr::case_when(       is.na(entity_id) ~ \"1\",       TRUE ~ entity_id     )   ) |>   # drop entity ids from group field and convert to camel case    dplyr::mutate(Group = stringr::str_replace_all(string = Group,pattern = \" [0-9]\", replacement = \"\"),                  Group = snakecase::to_lower_camel_case(Group))   ## split dataframe by Group for further processing   project_metadata_list  <- split(project_metadata_ids,project_metadata_ids$Group)   # The `get_entity` function creates standard entities that will be easier to transform json  project_metadata_list_entities <- purrr::map(project_metadata_list,function(x){   if(all(x$entity_id == \"1\")){     out <- get_entity(x)     return(out)   }      x_list <- split(x,x$entity_id)   names(x_list) <- NULL   out <-purrr::map(x_list, get_entity)   return(out) })"},{"path":"https://viralemergence.github.io/wddsWizard/articles/project_metadata.html","id":"make-the-json","dir":"Articles","previous_headings":"","what":"Make the json!","title":"Project Metadata","text":"simpler world - just run following code work. datacite’s structures complex, need prep. Luckily, host prep functions already exist package! mostly tag list items jsonlite::unbox /wrap things lists converted json, match data standard’s expected formats.","code":"## if only, if only the mockingbird sings jsonlite::toJSON(project_metadata_list_entities,pretty = TRUE,dataframe = \"columns\") prep_for_json(project_metadata_list_entities) |>   jsonlite::toJSON(pretty  = TRUE) #> { #>   \"creators\": [ #>     { #>         \"name\": \"Daniel J. Becker\", #>         \"givenName\": \"Daniel J.\", #>         \"familyName\": \"Becker\", #>         \"affiliation\": [ #>           { #>             \"name\": \"Department of Biology, University of Oklahoma, Norman, OK, USA\", #>             \"affiliationIdentifier\": \"https://ror.org/02aqsxs83\" #>           } #>         ], #>         \"nameIdentifiers\": [ #>           { #>             \"nameIdentifier\": \"https://orcid.org/0000-0003-4315-8628\", #>             \"nameIdentifierScheme\": \"ORCID\" #>           } #>         ] #>       }, #>     { #>         \"name\": \"Guang-Sheng Lei\", #>         \"givenName\": \"Guang-Sheng\", #>         \"familyName\": \"Lei\", #>         \"affiliation\": [ #>           { #>             \"name\": \"Department of Pathology and Laboratory Medicine, Indiana University School of Medicine, Indianapolis, IN, USA\", #>             \"affiliationIdentifier\": \"https://ror.org/02ets8c94\" #>           } #>         ] #>       } #>   ], #>   \"descriptions\": [ #>     { #>         \"description\": \"Bats can harbor many pathogens without showing disease…\", #>         \"descriptionType\": \"Abstract\" #>       } #>   ], #>   \"fundingReferences\": [ #>     { #>         \"funderName\": \"National Geographic Society\", #>         \"funderIdentifier\": \"http://dx.doi.org/10.13039/100006733\", #>         \"awardNumber\": \"NGS-55503R-19\" #>       }, #>     { #>         \"funderName\": \"Indiana University\", #>         \"funderIdentifier\": \"http://dx.doi.org/10.13039/100006733\" #>       }, #>     { #>         \"funderName\": \"College of Charleston\", #>         \"funderIdentifier\": \"http://dx.doi.org/10.13039/100009789\" #>       } #>   ], #>   \"identifiers\": [ #>     { #>         \"identifier\": \"https://www.ebi.ac.uk/pride/archive/projects/PXD031075\" #>       } #>   ], #>   \"language\": \"en\", #>   \"methodology\": { #>     \"eventBased\": false, #>     \"archival\": false #>   }, #>   \"publicationYear\": \"2022\", #>   \"rights\": [ #>     { #>         \"rights\": \"CC0\" #>       } #>   ], #>   \"subjects\": [ #>     { #>         \"subject\": \"Proteomics\" #>       }, #>     { #>         \"subject\": \"Immune Response\" #>       } #>   ], #>   \"titles\": [ #>     { #>       \"title\": \"Serum proteomics of coronavirus shedding in vampire bats (Desmodus rotundus)\" #>     } #>   ] #> }"},{"path":"https://viralemergence.github.io/wddsWizard/articles/whole_game.html","id":"combine-disease-data-and-project-metadata","dir":"Articles","previous_headings":"","what":"Combine disease data and project metadata","title":"The Whole Game","text":"","code":"## this is equivalent to the disease data from the vignette becker_disease_data <- wddsWizard::becker_disease_data  ## this is equivalent to the project metadata from the vignette  becker_project_metadata <- wddsWizard::becker_project_metadata  ## use append so that you do not add levels to your list  data_package <- append(becker_disease_data,becker_project_metadata)"},{"path":"https://viralemergence.github.io/wddsWizard/articles/whole_game.html","id":"make-json","dir":"Articles","previous_headings":"","what":"Make JSON","title":"The Whole Game","text":"","code":"# prepare for json - prepares data using known methods  data_package_prepped <- data_package |>   wddsWizard::prep_for_json()  # check that all required fields are in the data  req_field_check <- wddsWizard::schema_required_fields %in% names(data_package_prepped)  if(all(!req_field_check)){   wddsWizard::schema_required_fields[!req_field_check]   }  # convert to json  data_package_json <- jsonlite::toJSON(data_package_prepped,pretty = TRUE)"},{"path":"https://viralemergence.github.io/wddsWizard/articles/whole_game.html","id":"validate-your-json","dir":"Articles","previous_headings":"","what":"Validate your json!","title":"The Whole Game","text":"use {jsonvalidate} package make sure data_package_json meets wildlife disease data standard.","code":"schema <- here::here(\"inst/extdata/wdds_schema/wdds_schema.json\")  wdds_validator <- jsonvalidate::json_validator(schema,engine = \"ajv\") #> Warning: unknown format \"year\" ignored in schema at path #> \"#/definitions/date/anyOf/0\" #> Warning: unknown format \"year\" ignored in schema at path #> \"#/definitions/date/anyOf/0\" #> Warning: unknown format \"yearmonth\" ignored in schema at path #> \"#/definitions/date/anyOf/1\" #> Warning: unknown format \"yearmonth\" ignored in schema at path #> \"#/definitions/date/anyOf/1\" #> Warning: unknown format \"datetime\" ignored in schema at path #> \"#/definitions/date/anyOf/3\" #> Warning: unknown format \"datetime\" ignored in schema at path #> \"#/definitions/date/anyOf/3\" #> Warning: unknown format \"year-range\" ignored in schema at path #> \"#/definitions/date/anyOf/4\" #> Warning: unknown format \"year-range\" ignored in schema at path #> \"#/definitions/date/anyOf/4\" #> Warning: unknown format \"yearmonth-range\" ignored in schema at path #> \"#/definitions/date/anyOf/5\" #> Warning: unknown format \"yearmonth-range\" ignored in schema at path #> \"#/definitions/date/anyOf/5\" #> Warning: unknown format \"date-range\" ignored in schema at path #> \"#/definitions/date/anyOf/6\" #> Warning: unknown format \"date-range\" ignored in schema at path #> \"#/definitions/date/anyOf/6\" #> Warning: unknown format \"datetime-range\" ignored in schema at path #> \"#/definitions/date/anyOf/7\" #> Warning: unknown format \"datetime-range\" ignored in schema at path #> \"#/definitions/date/anyOf/7\"  project_validation <- wdds_validator(data_package_json,verbose = TRUE)  ## check for errors!  errors <- attributes(project_validation)  errors$errors #>   instancePath schemaPath  keyword missingProperty #> 1              #/required required            data #>                              message #> 1 must have required property 'data' #>                                                                                            schema #> 1 data, methodology, creators, titles, publicationYear, descriptions, language, fundingReferences #>                           parentSchema.$schema             parentSchema.title #> 1 https://json-schema.org/draft/2020-12/schema Wildlife Disease Data Standard #>                           parentSchema.description parentSchema.type #> 1 Flexible data standard for wildlife disease data            object #>   parentSchema.properties.data.type #> 1                            object #>                                                                                                                                                                                                                                                                                                                                                                                                                       parentSchema.properties.data.properties.sampleID.description #> 1 A researcher-generated unique ID for the sample: usually a unique string of both characters and integers (e.g., OS BZ19-114 to indicate an oral swab taken from animal BZ19-114; see worked example below), to avoid conflicts that can arise when datasets are merged with number-only notation for samples. Ideally, sample names should be kept consistent across all online databases and physical resources (e.g., museum collections or project-specific sample archives). #>   parentSchema.properties.data.properties.sampleID.type #> 1                                                 array #>   parentSchema.properties.data.properties.sampleID.items.type #> 1                                                string, null #>   parentSchema.properties.data.properties.sampleID.items.minItems #> 1                                                               1 #>   parentSchema.properties.data.properties.sampleID.items.uniqueItems #> 1                                                               TRUE #>                                                                                                                                                                                                                                                                       parentSchema.properties.data.properties.animalID.description #> 1 A researcher-generated unique ID for the individual animal from which the sample was collected: usually a unique string of both characters and integers (e.g., BZ19-114 to indicate animal 114 sampled in 2019 in Belize). Ideally, animal names should again be kept consistent across online databases and physical resources. #>   parentSchema.properties.data.properties.animalID.type #> 1                                                 array #>   parentSchema.properties.data.properties.animalID.items.type #> 1                                                string, null #>   parentSchema.properties.data.properties.animalID.items.minItems #> 1                                                               1 #>                                          parentSchema.properties.data.properties.latitude.description #> 1 Latitude of the collection site in decimal format. See http://rs.tdwg.org/dwc/terms/decimalLatitude #>   parentSchema.properties.data.properties.latitude.type #> 1                                                 array #>   parentSchema.properties.data.properties.latitude.items.type #> 1                                                number, null #>   parentSchema.properties.data.properties.latitude.items.minItems #> 1                                                               1 #>   parentSchema.properties.data.properties.latitude.items.maximum #> 1                                                             90 #>   parentSchema.properties.data.properties.latitude.items.minimum #> 1                                                            -90 #>                                            parentSchema.properties.data.properties.longitude.description #> 1 Longitude of the collection site  in decimal format. See http://rs.tdwg.org/dwc/terms/decimalLongitude #>   parentSchema.properties.data.properties.longitude.type #> 1                                                  array #>   parentSchema.properties.data.properties.longitude.items.type #> 1                                                 number, null #>   parentSchema.properties.data.properties.longitude.items.minItems #> 1                                                                1 #>   parentSchema.properties.data.properties.longitude.items.maximum #> 1                                                             180 #>   parentSchema.properties.data.properties.longitude.items.minimum #> 1                                                            -180 #>                                                                                                                                          parentSchema.properties.data.properties.spatialUncertaintiy.description #> 1 Coordinate uncertainty from GPS recordings, post-hoc digitization, or systematic alterations (e.g., jittering or rounding) expressed in meters. See http://rs.tdwg.org/dwc/terms/coordinateUncertaintyInMeters #>   parentSchema.properties.data.properties.spatialUncertaintiy.type #> 1                                                            array #>   parentSchema.properties.data.properties.spatialUncertaintiy.items.type #> 1                                                           number, null #>   parentSchema.properties.data.properties.spatialUncertaintiy.items.minItems #> 1                                                                          1 #>   parentSchema.properties.data.properties.spatialUncertaintiy.items.minimum #> 1                                                                         0 #>                                parentSchema.properties.data.properties.collectionDay.description #> 1 The day of the month on which the specimen was collected. See http://rs.tdwg.org/dwc/terms/day #>   parentSchema.properties.data.properties.collectionDay.type #> 1                                                      array #>   parentSchema.properties.data.properties.collectionDay.items.type #> 1                                                    integer, null #>   parentSchema.properties.data.properties.collectionDay.items.minItems #> 1                                                                    1 #>   parentSchema.properties.data.properties.collectionDay.items.minimum #> 1                                                                   1 #>   parentSchema.properties.data.properties.collectionDay.items.maximum #> 1                                                                  31 #>                     parentSchema.properties.data.properties.collectionMonth.description #> 1 The month in which the specimen was collected. See http://rs.tdwg.org/dwc/terms/month #>   parentSchema.properties.data.properties.collectionMonth.type #> 1                                                        array #>   parentSchema.properties.data.properties.collectionMonth.items.type #> 1                                                      integer, null #>   parentSchema.properties.data.properties.collectionMonth.items.minItems #> 1                                                                      1 #>   parentSchema.properties.data.properties.collectionMonth.items.minimum #> 1                                                                     1 #>   parentSchema.properties.data.properties.collectionMonth.items.maximum #> 1                                                                    12 #>                    parentSchema.properties.data.properties.collectionYear.description #> 1 The year in which the specimen was collected. See http://rs.tdwg.org/dwc/terms/year #>   parentSchema.properties.data.properties.collectionYear.type #> 1                                                       array #>   parentSchema.properties.data.properties.collectionYear.items.type #> 1                                                     integer, null #>   parentSchema.properties.data.properties.collectionYear.items.maximum #> 1                                                                 2025 #>                                             parentSchema.properties.data.properties.collectionMethodAndOrTissue.description #> 1 The technique used to extract the sample and/or the tissue from which the sample was extracted (e.g., oropharyngeal swab) #>   parentSchema.properties.data.properties.collectionMethodAndOrTissue.type #> 1                                                                    array #>   parentSchema.properties.data.properties.collectionMethodAndOrTissue.items.type #> 1                                                                   string, null #>   parentSchema.properties.data.properties.collectionMethodAndOrTissue.items.minItems #> 1                                                                                  1 #>                                                                                                                                                                                                                                                                                                                                                            parentSchema.properties.data.properties.hostIdentification.description #> 1 The Linnaean classification of the animal from which the sample was collected, reported at the lowest possible level (ideally, species binomial name: e.g., Odocoileus virginianus or Ixodes scapularis). As necessary, researchers may also include an additional field indicating when uncertainty exists in the identification of the host organism (see Adding new fields). See http://rs.tdwg.org/dwc/terms/scientificName #>   parentSchema.properties.data.properties.hostIdentification.type #> 1                                                           array #>   parentSchema.properties.data.properties.hostIdentification.items.type #> 1                                                          string, null #>   parentSchema.properties.data.properties.hostIdentification.items.minItems #> 1                                                                         1 #>   parentSchema.properties.data.properties.hostIdentification.items.pattern #> 1                                        [HOMOhomo]{4} [SAPIENSsapiens]{7} #>                                              parentSchema.properties.data.properties.organismSex.description #> 1 The sex of the individual animal from which the sample was collected. See http://rs.tdwg.org/dwc/terms/sex #>   parentSchema.properties.data.properties.organismSex.examples #> 1                                  male, female, hermaphrodite #>   parentSchema.properties.data.properties.organismSex.type #> 1                                                    array #>   parentSchema.properties.data.properties.organismSex.items.type #> 1                                                   string, null #>   parentSchema.properties.data.properties.organismSex.items.minItems #> 1                                                                  1 #>                                                                                       parentSchema.properties.data.properties.deadOrAlive.description #> 1 The state of the individual animal from which the sample was collected, at the time of sample collection. See http://rs.tdwg.org/dwc/terms/vitality #>   parentSchema.properties.data.properties.deadOrAlive.examples #> 1                dead, alive, uncertain, mixedLot, notAssessed #>   parentSchema.properties.data.properties.deadOrAlive.type #> 1                                                    array #>   parentSchema.properties.data.properties.deadOrAlive.items.type #> 1                                                   string, null #>   parentSchema.properties.data.properties.deadOrAlive.items.minItems #> 1                                                                  1 #>                                    parentSchema.properties.data.properties.healthNotes.description #> 1 Any additional (unstructured) notes about the state of the animal, such as disease presentation. #>   parentSchema.properties.data.properties.healthNotes.type #> 1                                                    array #>   parentSchema.properties.data.properties.healthNotes.items.type #> 1                                                   string, null #>   parentSchema.properties.data.properties.healthNotes.items.minItems #> 1                                                                  1 #>                                                                                                        parentSchema.properties.data.properties.hostLifeStage.description #> 1 The life stage of the animal from which the sample was collected (as appropriate for the organism) (e.g., juvenile, adult). See http://rs.tdwg.org/dwc/terms/lifeStage #>   parentSchema.properties.data.properties.hostLifeStage.examples #> 1                                         juvenile, adult, larva #>   parentSchema.properties.data.properties.hostLifeStage.type #> 1                                                      array #>   parentSchema.properties.data.properties.hostLifeStage.items.type #> 1                                                     string, null #>   parentSchema.properties.data.properties.hostLifeStage.items.minItems #> 1                                                                    1 #>                                                                                           parentSchema.properties.data.properties.age.description #> 1 The numeric age of the animal from which the sample was collected, at the time of sample collection, if known (e.g., in monitored populations). #>   parentSchema.properties.data.properties.age.type #> 1                                            array #>   parentSchema.properties.data.properties.age.items.type #> 1                                           number, null #>   parentSchema.properties.data.properties.age.items.minItems #> 1                                                          1 #>   parentSchema.properties.data.properties.age.items.minimum #> 1                                                         0 #>   parentSchema.properties.data.properties.ageUnits.description #> 1          The units in which age is measured (usually years). #>   parentSchema.properties.data.properties.ageUnits.type #> 1                                                 array #>   parentSchema.properties.data.properties.ageUnits.items.type #> 1                                                string, null #>   parentSchema.properties.data.properties.ageUnits.items.enum #> 1                years, months, days, hours, minutes, seconds #>   parentSchema.properties.data.properties.ageUnits.items.minItems #> 1                                                               1 #>                                        parentSchema.properties.data.properties.mass.description #> 1 The mass of the animal from which the sample was collected, at the time of sample collection. #>   parentSchema.properties.data.properties.mass.type #> 1                                             array #>   parentSchema.properties.data.properties.mass.items.type #> 1                                            number, null #>   parentSchema.properties.data.properties.mass.items.minItems #> 1                                                           1 #>   parentSchema.properties.data.properties.mass.items.minimum #> 1                                                          0 #>   parentSchema.properties.data.properties.massUnits.description #> 1                The units that mass is recorded in (e.g., kg). #>   parentSchema.properties.data.properties.massUnits.examples #> 1                             kg, g, mg, kilogram, milligram #>   parentSchema.properties.data.properties.massUnits.type #> 1                                                  array #>   parentSchema.properties.data.properties.massUnits.items.type #> 1                                                 string, null #>   parentSchema.properties.data.properties.massUnits.items.minItems #> 1                                                                1 #>                                                parentSchema.properties.data.properties.length.description #> 1 The numeric length of the animal from which the sample was collected, at the time of sample collection. #>   parentSchema.properties.data.properties.length.type #> 1                                               array #>   parentSchema.properties.data.properties.length.items.type #> 1                                              number, null #>   parentSchema.properties.data.properties.length.items.minItems #> 1                                                             1 #>   parentSchema.properties.data.properties.length.items.minimum #> 1                                                            0 #>                                                          parentSchema.properties.data.properties.lengthMeasurement.description #> 1 The axis of measurement for the organism being measured (e.g., snout-vent length or just SVL; wing length; primary feather). #>   parentSchema.properties.data.properties.lengthMeasurement.examples #> 1          snout-vent length, intertegular distance, primary feather #>   parentSchema.properties.data.properties.lengthMeasurement.type #> 1                                                          array #>   parentSchema.properties.data.properties.lengthMeasurement.items.type #> 1                                                         string, null #>   parentSchema.properties.data.properties.lengthMeasurement.items.minItems #> 1                                                                        1 #>   parentSchema.properties.data.properties.lengthUnits.description #> 1                The units that length is recorded in (e.g., mm). #>   parentSchema.properties.data.properties.lengthUnits.examples #> 1                                           mm, meters, cm, km #>   parentSchema.properties.data.properties.lengthUnits.type #> 1                                                    array #>   parentSchema.properties.data.properties.lengthUnits.items.type #> 1                                                   string, null #>   parentSchema.properties.data.properties.lengthUnits.items.minItemsparentSchema.properties.data.properties.detectionTarget.description #> 1 The taxonomic identity of the parasite being screened for in the sample. This will often be coarser than the identity of a specific parasite identified in the sample: for example, in a study screening for novel bat coronaviruses, the entire family Coronaviridae might be the target; in a parasite dissection, the targets might be Acanthocephala, Cestoda, Nematoda, and Trematoda. For deep sequencing approaches (e.g., metagenomic and metatranscriptomic viral discovery), researchers should report each alignment target used as a new test to maximize reporting of negative data, or alternatively, select a subset that reflect specific study objectives and the focus of analysis (e.g., specific viral families). See http://rs.tdwg.org/dwc/terms/associatedOccurrences #>   parentSchema.properties.data.properties.detectionTarget.type #> 1                                                        array #>   parentSchema.properties.data.properties.detectionTarget.items.type #> 1                                                       string, null #>   parentSchema.properties.data.properties.detectionTarget.items.minItems #> 1                                                                      1 #>                                       parentSchema.properties.data.properties.detectionMethod.description #> 1 The type of test performed to detect the parasite or parasite-specific antibody (e.g., 'qPCR', ‘ELISA’) #>   parentSchema.properties.data.properties.detectionMethod.type #> 1                                                        array #>   parentSchema.properties.data.properties.detectionMethod.items.type #> 1                                                       string, null #>   parentSchema.properties.data.properties.detectionMethod.items.minItems #> 1                                                                      1 #>                                                                                                                                                                                         parentSchema.properties.data.properties.primerSequence.description #> 1 The sequence of both forward and reverse primers used to identify the sample (e.g., forward 5’ CDCAYGARTTYTGYTCNCARC 3' ; reverse 5’ RHGGRTANGCRTCWATDGC 3') or the name of a commonly used gene target (particularly if citation information is given). #>                                       parentSchema.properties.data.properties.primerSequence.examples #> 1 forward 5’ CDCAYGARTTYTGYTCNCARC 3' ; reverse 5’ RHGGRTANGCRTCWATDGC 3', name of common gene target #>   parentSchema.properties.data.properties.primerSequence.type #> 1                                                       array #>   parentSchema.properties.data.properties.primerSequence.items.type #> 1                                                      string, null #>   parentSchema.properties.data.properties.primerSequence.items.minItems #> 1                                                                     1 #>                                 parentSchema.properties.data.properties.primerCitation.description #> 1 Citation for the primer being used. (e.g. title, doi, or other permanent identifier for a work). #>                                                                                                                                                                                                                      parentSchema.properties.data.properties.primerCitation.examples #> 1 https://doi.org/10.1016/j.virol.2007.06.009, Complete genome sequence of bat coronavirus HKU2 from Chinese horseshoe bats revealed a much smaller spike gene with a different evolutionary lineage from the rest of the genome, PMC7103351, https://openalex.org/works/w2036144053 #>   parentSchema.properties.data.properties.primerCitation.type #> 1                                                       array #>   parentSchema.properties.data.properties.primerCitation.items.type #> 1                                                      string, null #>   parentSchema.properties.data.properties.primerCitation.items.minItems #> 1                                                                     1 #>                                                                                                                                   parentSchema.properties.data.properties.detectionOutcome.description #> 1 The test result (i.e., positive, negative, or inconclusive). To avoid ambiguity, these specific values are suggested over numeric values (0 or 1). See http://rs.tdwg.org/dwc/terms/occurrenceStatus #>   parentSchema.properties.data.properties.detectionOutcome.type #> 1                                                         array #>   parentSchema.properties.data.properties.detectionOutcome.items.type #> 1                                                        string, null #>   parentSchema.properties.data.properties.detectionOutcome.items.minItems #> 1                                                                       1 #>                                                                                             parentSchema.properties.data.properties.detectionMeasurement.description #> 1 Any numeric measurement of parasite detection that is more detailed than simple positive or negative results (e.g., viral titer, parasite counts, sequence reads). #>   parentSchema.properties.data.properties.detectionMeasurement.type #> 1                                                             array #>   parentSchema.properties.data.properties.detectionMeasurement.items.type #> 1                                                            number, null #>   parentSchema.properties.data.properties.detectionMeasurement.items.minItems #> 1                                                                           1 #>                                         parentSchema.properties.data.properties.detectionMeasurementUnits.description #> 1 Units for quantitative measurements of parasite intensity or test results (e.g., Ct, TCID50/mL, or parasite count). #>   parentSchema.properties.data.properties.detectionMeasurementUnits.examples #> 1                                              Ct, TCID50/mL, parasite count #>   parentSchema.properties.data.properties.detectionMeasurementUnits.type #> 1                                                                  array #>   parentSchema.properties.data.properties.detectionMeasurementUnits.items.type #> 1                                                                 string, null #>   parentSchema.properties.data.properties.detectionMeasurementUnits.items.minItems #> 1                                                                                1 #>                                                                                                                                                                                                                                                          parentSchema.properties.data.properties.parasiteIdentification.description #> 1 The identity of a parasite detected by the test, if any, reported to the lowest possible taxonomic level, either as a Linnaean binomial classification or within the convention of a relevant taxonomic authority (e.g., Borrelia burgdorferi or Zika virus). Parasite identification may be more specific than detection target. #>   parentSchema.properties.data.properties.parasiteIdentification.examples #> 1                   Zika virus, Borrelia burgdorferi, Onchocerca volvulus #>   parentSchema.properties.data.properties.parasiteIdentification.type #> 1                                                               array #>   parentSchema.properties.data.properties.parasiteIdentification.items.type #> 1                                                              string, null #>   parentSchema.properties.data.properties.parasiteIdentification.items.minItems #> 1                                                                             1 #>                                                           parentSchema.properties.data.properties.parasiteLifeStage.description #> 1 The life stage of the parasite from which the sample was collected (as appropriate for the organism) (e.g., juvenile, adult). #>   parentSchema.properties.data.properties.parasiteLifeStage.examples #> 1                                        juvenile, adult, sporozoite #>   parentSchema.properties.data.properties.parasiteLifeStage.type #> 1                                                          array #>   parentSchema.properties.data.properties.parasiteLifeStage.items.type #> 1                                                         string, null #>   parentSchema.properties.data.properties.parasiteLifeStage.items.minItems #> 1                                                                        1 #>                                                                                                                                                                                                                                     parentSchema.properties.data.properties.genbankAccession.description #> 1 The GenBank accession for any parasite genetic sequence(s), if appropriate.  Accession numbers or other identifiers for related data stored on another platform should be added in a different field (e.g. GISAID Accession, Immport Accession). See http://rs.tdwg.org/dwc/terms/otherCatalogNumbers  #>   parentSchema.properties.data.properties.genbankAccession.examples #> 1                                           U49845 | U49846, U11111 #>   parentSchema.properties.data.properties.genbankAccession.type #> 1                                                         array #>   parentSchema.properties.data.properties.genbankAccession.items.type #> 1                                                        string, null #>   parentSchema.properties.data.properties.genbankAccession.items.minItems #> 1                                                                       1 #>                                                                                                                                                                                  parentSchema.properties.data.required #> 1 sampleID, animalID, latitude, longitude, collectionDay, collectionMonth, collectionYear, collectionMethodAndOrTissue, hostIdentification, detectionTarget, detectionMethod, detectionOutcome, parasiteIdentification #>   parentSchema.properties.methodology.type #> 1                                   object #>                                                                                 parentSchema.properties.methodology.properties.eventBased.description #> 1 Whether or not research was conducted in response to a known or suspected infectious disease outbreak, observed animal morbidity or mortality, etc. #>   parentSchema.properties.methodology.properties.eventBased.type #> 1                                                        boolean #>                  parentSchema.properties.methodology.properties.archival.description #> 1 Whether samples were from an archival source (e.g., museum collections, biobanks). #>   parentSchema.properties.methodology.properties.archival.type #> 1                                                      boolean #>   parentSchema.properties.methodology.anyOf #> 1                      eventBased, archival #>                                     parentSchema.properties.creators.description #> 1 The full names of the creators. Should be in the format familyName, givenName. #>                      parentSchema.properties.creators.$ref #> 1 schemas/datacite/datacite-v4.5.json#/properties/creators #>      parentSchema.properties.titles.description #> 1 A name or title by which a resource is known. #>                      parentSchema.properties.titles.$ref #> 1 schemas/datacite/datacite-v4.5.json#/properties/titles #>   parentSchema.properties.identifiers.description #> 1     A unique string that identifies a resource. #>   parentSchema.properties.identifiers.type #> 1                                    array #>   parentSchema.properties.identifiers.items.type #> 1                                         object #>   parentSchema.properties.identifiers.items.properties.type #> 1                                                    string #>                parentSchema.properties.identifiers.items.properties.$ref #> 1 schemas/datacite/datacite-v4.5.json#/definitions/relatedIdentifierType #>   parentSchema.properties.identifiers.items.required #> 1                                         identifier #>   parentSchema.properties.identifiers.items.uniqueItems #> 1                                                  TRUE #>              parentSchema.properties.publicationYear.description #> 1 The year when the data was or will be made publicly available. #>                      parentSchema.properties.publicationYear.$ref #> 1 schemas/datacite/datacite-v4.5.json#/properties/publicationYear #>   parentSchema.properties.rights.description #> 1  Any rights information for this resource. #>                          parentSchema.properties.rights.$ref #> 1 schemas/datacite/datacite-v4.5.json#/properties/rightsList #>                                                                                                                                      parentSchema.properties.descriptions.description #> 1 All additional information that does not fit in any of the other categories. May be used for technical information or detailed information associated with a scientific instrument. #>                      parentSchema.properties.descriptions.$ref #> 1 schemas/datacite/datacite-v4.5.json#/properties/descriptions #>   parentSchema.properties.language.description #> 1        The primary language of the resource. #>                      parentSchema.properties.language.$ref #> 1 schemas/datacite/datacite-v4.5.json#/properties/language #>           parentSchema.properties.fundingReferences.description #> 1 Name and other identifying information of a funding provider. #>                      parentSchema.properties.fundingReferences.$ref #> 1 schemas/datacite/datacite-v4.5.json#/properties/fundingReferences #>                                                                             parentSchema.required #> 1 data, methodology, creators, titles, publicationYear, descriptions, language, fundingReferences #>            data.sampleID      data.animalID    data.latitude     data.longitude #> 1 OS BZ19-95, RS BZ19-95 BZ19-114, BZ19-114 17.7643, 17.7643 -88.6521, -88.6521 #>   data.collectionDay data.collectionMonth data.collectionYear #> 1             23, 23                 4, 4          2019, 2019 #>   data.collectionMethodAndOrTissue              data.hostIdentification #> 1           Oral swab, Rectal swab Desmodus rotundus, Desmodus rotundus #>   data.organismSex data.deadOrAlive data.hostLifeStage    data.mass #> 1       male, male     alive, alive subadult, subadult 0.023, 0.023 #>   data.massUnits         data.detectionTarget             data.detectionMethod #> 1         kg, kg Coronaviridae, Coronaviridae semi-nested PCR, semi-nested PCR #>   data.primerSequence                        data.primerCitation #> 1          RdRp, RdRp doi:10.3390/v9120364, doi:10.3390/v9120364 #>   data.detectionOutcome data.parasiteIdentification data.genBankAccession #> 1    positive, negative        Alphacoronavirus, NA          OM240578, NA #>                                                                                                                                                                                                                                                                                                                                               data.creators #> 1 Daniel J. Becker, Guang-Sheng Lei, Daniel J., Guang-Sheng, Becker, Lei, Department of Biology, University of Oklahoma, Norman, OK, USA, https://ror.org/02aqsxs83, Department of Pathology and Laboratory Medicine, Indiana University School of Medicine, Indianapolis, IN, USA, https://ror.org/02ets8c94, https://orcid.org/0000-0003-4315-8628, ORCID #>                                                   data.descriptions #> 1 Bats can harbor many pathogens without showing disease…, Abstract #>                                                                                                                                                                                            data.fundingReferences #> 1 National Geographic Society, Indiana University, College of Charleston, http://dx.doi.org/10.13039/100006733, http://dx.doi.org/10.13039/100006733, http://dx.doi.org/10.13039/100009789, NGS-55503R-19, NA, NA #>                                         data.identifiers data.language #> 1 https://www.ebi.ac.uk/pride/archive/projects/PXD031075            en #>   data.methodology.eventBased data.methodology.archival data.publicationYear #> 1                       FALSE                     FALSE                 2022 #>   data.rights               data.subjects #> 1         CC0 Proteomics, Immune Response #>                                                                    data.titles #> 1 Serum proteomics of coronavirus shedding in vampire bats (Desmodus rotundus) #>   dataPath #> 1"},{"path":"https://viralemergence.github.io/wddsWizard/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Collin Schwantes. Author, maintainer.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schwantes C (2025). wddsWizard: Data Wizard minimal Wildlife Disease Data Standard. R package version 0.0.0.9000, https://viralemergence.github.io/wddsWizard/.","code":"@Manual{,   title = {wddsWizard: Data Wizard for a minimal Wildlife Disease Data Standard},   author = {Collin Schwantes},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://viralemergence.github.io/wddsWizard/}, }"},{"path":"https://viralemergence.github.io/wddsWizard/index.html","id":"wddswizard","dir":"","previous_headings":"","what":"Data Wizard for a minimal Wildlife Disease Data Standard","title":"Data Wizard for a minimal Wildlife Disease Data Standard","text":"R package validating data Wildlife Disease Data Standard (wdds).","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_disease_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Becker et al. dataset — becker_disease_data","title":"Becker et al. dataset — becker_disease_data","text":"bat coronavirus dataset conforms wildlife disease data standard. See data standard field descriptions","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_disease_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Becker et al. dataset — becker_disease_data","text":"","code":"becker_disease_data"},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_disease_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Becker et al. dataset — becker_disease_data","text":"object class tbl_df (inherits tbl, data.frame) 2 rows 21 columns.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_disease_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Becker et al. dataset — becker_disease_data","text":"https://www.ebi.ac.uk/pride/archive/projects/PXD031075","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_project_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Becker et al. project metadata — becker_project_metadata","title":"Becker et al. project metadata — becker_project_metadata","text":"project metadata bat coronavirus dataset conforms wildlife disease data standard. See data standard field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_project_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Becker et al. project metadata — becker_project_metadata","text":"","code":"becker_project_metadata"},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_project_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Becker et al. project metadata — becker_project_metadata","text":"object class list length 10.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_project_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Becker et al. project metadata — becker_project_metadata","text":"https://www.ebi.ac.uk/pride/archive/projects/PXD031075","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/data_required_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Required fields in the data object — data_required_fields","title":"Required fields in the data object — data_required_fields","text":"See data standard JSON file field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/data_required_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required fields in the data object — data_required_fields","text":"","code":"data_required_fields"},{"path":"https://viralemergence.github.io/wddsWizard/reference/data_required_fields.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Required fields in the data object — data_required_fields","text":"object class character length 13.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get entity — get_entity","title":"Get entity — get_entity","text":"get_entity function creates standard entities easier transform json.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get entity — get_entity","text":"","code":"get_entity(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get entity — get_entity","text":"x data frame. \"long\" form data frame fields Group, entity_id, Value, variable.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get entity — get_entity","text":"data frame \"wide\" form","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get entity — get_entity","text":"Pivots data long wide.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get entity — get_entity","text":"","code":"df <- data.frame(Group = 1, entity_id = 1, Value = 1:3, Variable = letters[1:3])  get_entity(df) #> # A tibble: 1 × 3 #>       a     b     c #>   <int> <int> <int> #> 1     1     2     3"},{"path":"https://viralemergence.github.io/wddsWizard/reference/minimal_project_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"An example of minimal project metadata — minimal_project_metadata","title":"An example of minimal project metadata — minimal_project_metadata","text":"minimal project metadata example. list minimal items required project metadata.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/minimal_project_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example of minimal project metadata — minimal_project_metadata","text":"","code":"minimal_project_metadata"},{"path":"https://viralemergence.github.io/wddsWizard/reference/minimal_project_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example of minimal project metadata — minimal_project_metadata","text":"object class list length 7.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":null,"dir":"Reference","previous_headings":"","what":"prep affiliation — prep_affiliation","title":"prep affiliation — prep_affiliation","text":"affiliations associated creator.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prep affiliation — prep_affiliation","text":"","code":"prep_affiliation(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prep affiliation — prep_affiliation","text":"x tibble prep_creators","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prep affiliation — prep_affiliation","text":"tibble affilition fields list column called affilition","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"prep affiliation — prep_affiliation","text":"Affiliation datacite array objects properties name, affiliationIdentifier, affiliationIdentifierScheme, schemeURI. function takes affiliation fields restructures list within dataframe. Affiliation fields converted list: \"affiliation\", #' \"affiliationIdentifier\", \"affiliationIdentifierScheme\" , \"schemeUri\"","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare an array of objects — prep_array_objects","title":"Prepare an array of objects — prep_array_objects","text":"wraps tibble/dataframe list /unboxes list items 1 row tibbles/dataframes. result array objects created.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare an array of objects — prep_array_objects","text":"","code":"prep_array_objects(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare an array of objects — prep_array_objects","text":"x list tibbles/data frames tibble/data frame","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare an array of objects — prep_array_objects","text":"list single row unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare an array of objects — prep_array_objects","text":"","code":"# note that you cannot unbox data frames with more than 1 row  x <- list(tibble::tibble(age = 1,group = letters[1]),           tibble::tibble(age = 2,group = letters[2]))  # running jsonlite::toJSON on an unmodified object results in # extra square brackets - an array of arrays of objects jsonlite::toJSON(x, pretty = TRUE) #> [ #>   [ #>     { #>       \"age\": 1, #>       \"group\": \"a\" #>     } #>   ], #>   [ #>     { #>       \"age\": 2, #>       \"group\": \"b\" #>     } #>   ] #> ]   # with the prepped data we get an array of objects x_prepped  <- prep_array_objects(x)  x_prepped |>   jsonlite::toJSON(pretty = TRUE) #> [ #>   { #>       \"age\": 1, #>       \"group\": \"a\" #>     }, #>   { #>       \"age\": 2, #>       \"group\": \"b\" #>     } #> ]"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare atomic — prep_atomic","title":"Prepare atomic — prep_atomic","text":"thin wrapper jsonlite::unbox. stops jsonlite representing single character, numeric, logical, etc. items arrays.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare atomic — prep_atomic","text":"","code":"prep_atomic(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare atomic — prep_atomic","text":"x vector","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare atomic — prep_atomic","text":"unboxed dataframe 1 row","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare atomic — prep_atomic","text":"useful property definition type string, number, logical length 1.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare atomic — prep_atomic","text":"","code":"x <- 1  # values in x are stored in an array x|> jsonlite::toJSON() #> [1]   # output is [1]  # values in x are NOT stored in an array (no square brackets) prep_atomic(x) |>   jsonlite::toJSON() #> 1  # output is 1"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare creators — prep_creators","title":"Prepare creators — prep_creators","text":"creator object can complex prepare components final object (e.g. affiliation, nameIdentifiers) run prep_array_objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare creators — prep_creators","text":"","code":"prep_creators(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare creators — prep_creators","text":"x data frame named list.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare creators — prep_creators","text":"List unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare creators — prep_creators","text":"","code":"wddsWizard::becker_project_metadata$creators |>  prep_creators() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 5 #>   name             givenName familyName affiliation      nameIdentifiers  #> * <chr>            <chr>     <chr>      <list>           <list>           #> 1 Daniel J. Becker Daniel J. Becker     <tibble [1 × 2]> <tibble [1 × 2]> #>  #> [[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 4 #>   name            givenName   familyName affiliation      #> * <chr>           <chr>       <chr>      <list>           #> 1 Guang-Sheng Lei Guang-Sheng Lei        <tibble [1 × 2]> #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Data — prep_data","title":"Prepare Data — prep_data","text":"Prepares object arrays.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Data — prep_data","text":"","code":"prep_data(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Data — prep_data","text":"x named vector, list, data frame","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Data — prep_data","text":"List formatted objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Data — prep_data","text":"Note unboxing work items 1:1 key value pair. dataframe multiple rows list  multiple values given position, work.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Data — prep_data","text":"","code":"cars_small  <- datasets::cars[1:10,]  # creates an array of objects where each # row is an object cars_small |>   jsonlite::toJSON(pretty = TRUE) #> [ #>   { #>     \"speed\": 4, #>     \"dist\": 2 #>   }, #>   { #>     \"speed\": 4, #>     \"dist\": 10 #>   }, #>   { #>     \"speed\": 7, #>     \"dist\": 4 #>   }, #>   { #>     \"speed\": 7, #>     \"dist\": 22 #>   }, #>   { #>     \"speed\": 8, #>     \"dist\": 16 #>   }, #>   { #>     \"speed\": 9, #>     \"dist\": 10 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 18 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 26 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 34 #>   }, #>   { #>     \"speed\": 11, #>     \"dist\": 17 #>   } #> ]   # creates an object with 2 arrays prep_object(cars_small) |>   jsonlite::toJSON(pretty = TRUE) #> { #>   \"speed\": [4, 4, 7, 7, 8, 9, 10, 10, 10, 11], #>   \"dist\": [2, 10, 4, 22, 16, 10, 18, 26, 34, 17] #> }   # this makes no difference x <- list(\"hello\" = 1:10, \"world\" = \"Earth\")  prep_object(x) |>   jsonlite::toJSON(pretty = TRUE) #> { #>   \"hello\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], #>   \"world\": [\"Earth\"] #> }"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare descriptions — prep_descriptions","title":"Prepare descriptions — prep_descriptions","text":"Wrapper prep_array_objects.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare descriptions — prep_descriptions","text":"","code":"prep_descriptions(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare descriptions — prep_descriptions","text":"x Data frame/Tibble containing description items","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare descriptions — prep_descriptions","text":"List x marked unbox (make array)","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare descriptions — prep_descriptions","text":"","code":"x  <- wddsWizard::becker_project_metadata$descriptions  prep_descriptions(x) |> jsonlite::toJSON() #> [{\"description\":\"Bats can harbor many pathogens without showing disease…\",\"descriptionType\":\"Abstract\"}]"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for json — prep_for_json","title":"Prepare data for json — prep_for_json","text":"Usespurrr::modify_at apply set methods specific locations list.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for json — prep_for_json","text":"","code":"prep_for_json(x, prep_methods_list = prep_methods())"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for json — prep_for_json","text":"x list. Named list data frames, lists, vectors. methods applied, names list items match names methods list prep_methods_list list. Named list methods items function applied corresponding items x.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for json — prep_for_json","text":"Named list methods applied.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for json — prep_for_json","text":"","code":"wddsWizard::becker_project_metadata |>    prep_for_json() #> $creators #> $creators[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 5 #>   name             givenName familyName affiliation      nameIdentifiers  #> * <chr>            <chr>     <chr>      <list>           <list>           #> 1 Daniel J. Becker Daniel J. Becker     <tibble [1 × 2]> <tibble [1 × 2]> #>  #> $creators[[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 4 #>   name            givenName   familyName affiliation      #> * <chr>           <chr>       <chr>      <list>           #> 1 Guang-Sheng Lei Guang-Sheng Lei        <tibble [1 × 2]> #>  #>  #> $descriptions #> $descriptions[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 2 #>   description                                             descriptionType #> * <chr>                                                   <chr>           #> 1 Bats can harbor many pathogens without showing disease… Abstract        #>  #>  #> $fundingReferences #> $fundingReferences[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 3 #>   funderName                  funderIdentifier                     awardNumber   #> * <chr>                       <chr>                                <chr>         #> 1 National Geographic Society http://dx.doi.org/10.13039/100006733 NGS-55503R-19 #>  #> $fundingReferences[[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 2 #>   funderName         funderIdentifier                     #> * <chr>              <chr>                                #> 1 Indiana University http://dx.doi.org/10.13039/100006733 #>  #> $fundingReferences[[3]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 2 #>   funderName            funderIdentifier                     #> * <chr>                 <chr>                                #> 1 College of Charleston http://dx.doi.org/10.13039/100009789 #>  #>  #> $identifiers #> $identifiers[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 1 #>   identifier                                             #> * <chr>                                                  #> 1 https://www.ebi.ac.uk/pride/archive/projects/PXD031075 #>  #>  #> $language #> [x] \"en\" #>  #> $methodology #> $methodology$eventBased #> [x] false #>  #> $methodology$archival #> [x] false #>  #>  #> $publicationYear #> [x] \"2022\" #>  #> $rights #> $rights[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 1 #>   rights #> * <chr>  #> 1 CC0    #>  #>  #> $subjects #> $subjects[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 1 #>   subject    #> * <chr>      #> 1 Proteomics #>  #> $subjects[[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 1 #>   subject         #> * <chr>           #> 1 Immune Response #>  #>  #> $titles #> # A tibble: 1 × 1 #>   title                                                                        #>   <chr>                                                                        #> 1 Serum proteomics of coronavirus shedding in vampire bats (Desmodus rotundus) #>    a <- list(\"hello_world\" = 1:10 )  methods_list <- list(\"hello_world\" = function(x){x*2},                        \"unused_method\" = function(x){x/2})  prep_for_json(a,methods_list) #> $hello_world #>  [1]  2  4  6  8 10 12 14 16 18 20 #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare funding references — prep_fundingReferences","title":"Prepare funding references — prep_fundingReferences","text":"creates array objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare funding references — prep_fundingReferences","text":"","code":"prep_fundingReferences(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare funding references — prep_fundingReferences","text":"x list tibbles/data frames tibble/data frame","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare funding references — prep_fundingReferences","text":"list single row unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare funding references — prep_fundingReferences","text":"","code":"wddsWizard::becker_project_metadata$fundingReferences |>  prep_fundingReferences() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 3 #>   funderName                  funderIdentifier                     awardNumber   #> * <chr>                       <chr>                                <chr>         #> 1 National Geographic Society http://dx.doi.org/10.13039/100006733 NGS-55503R-19 #>  #> [[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 2 #>   funderName         funderIdentifier                     #> * <chr>              <chr>                                #> 1 Indiana University http://dx.doi.org/10.13039/100006733 #>  #> [[3]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 2 #>   funderName            funderIdentifier                     #> * <chr>                 <chr>                                #> 1 College of Charleston http://dx.doi.org/10.13039/100009789 #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep identifiers — prep_identifiers","title":"Prep identifiers — prep_identifiers","text":"Prepare identifiers scholarly work. Wrapper prep_array_objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep identifiers — prep_identifiers","text":"","code":"prep_identifiers(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep identifiers — prep_identifiers","text":"x data frame identifier properties","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep identifiers — prep_identifiers","text":"List x marked unbox","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifiers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep identifiers — prep_identifiers","text":"","code":"wddsWizard::becker_project_metadata$identifiers |> prep_identifiers() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 1 #>   identifier                                             #> * <chr>                                                  #> 1 https://www.ebi.ac.uk/pride/archive/projects/PXD031075 #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep language — prep_language","title":"Prep language — prep_language","text":"Prepare language property - describe language scholarly work.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep language — prep_language","text":"","code":"prep_language(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep language — prep_language","text":"x named list, vector, data.frame 1:1 name:value pairs","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep language — prep_language","text":"unboxed dataframe 1 row","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep language — prep_language","text":"","code":"a <- data.frame(\"language\" = \"en\")  prep_language(a) #> [x] \"en\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep methodology for conversion to json — prep_methodology","title":"Prep methodology for conversion to json — prep_methodology","text":"Prep methodology conversion json","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep methodology for conversion to json — prep_methodology","text":"","code":"prep_methodology(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep methodology for conversion to json — prep_methodology","text":"x List. methodology component list","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep methodology for conversion to json — prep_methodology","text":"properly formatted list","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep methodology for conversion to json — prep_methodology","text":"","code":"if (FALSE) { # \\dontrun{ prepped_list <- project_metadata_list_entities  prepped_list$methodology <- prep_methodology(project_metadata_list_entities$methodology)   OR   prepped_list <- purrr::modify_at(project_metadata_list_entities,\"methodology\",prep_methodology) } # }"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare methods — prep_methods","title":"Prepare methods — prep_methods","text":"Collection methods preparing data conveniently named make preparing easier","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare methods — prep_methods","text":"","code":"prep_methods()"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare methods — prep_methods","text":"list methods","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare methods — prep_methods","text":"","code":"prep_methods() #> $data #> function (x)  #> { #>     prep_object(x) #> } #> <bytecode: 0x55c08e5ab5d8> #> <environment: namespace:wddsWizard> #>  #> $creators #> function (x)  #> { #>     x_aff <- purrr::map(x, prep_affiliation) #>     x_nid <- purrr::map(x_aff, prep_nameIdentifiers) #>     out <- prep_array_objects(x_nid) #>     return(out) #> } #> <bytecode: 0x55c091108a38> #> <environment: namespace:wddsWizard> #>  #> $descriptions #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x55c094477468> #> <environment: namespace:wddsWizard> #>  #> $fundingReferences #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x55c08e5a81b8> #> <environment: namespace:wddsWizard> #>  #> $identifiers #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x55c08e5a8a08> #> <environment: namespace:wddsWizard> #>  #> $language #> function (x)  #> { #>     prep_atomic(x) #> } #> <bytecode: 0x55c08e593c88> #> <environment: namespace:wddsWizard> #>  #> $methodology #> function (x)  #> { #>     x <- dplyr::mutate(x, eventBased = as.logical(eventBased),  #>         archival = as.logical(archival)) #>     prep_object(x, unbox = TRUE) #> } #> <bytecode: 0x55c08e588cc0> #> <environment: namespace:wddsWizard> #>  #> $publicationYear #> function (x)  #> { #>     prep_atomic(x) #> } #> <bytecode: 0x55c08e58a1f8> #> <environment: namespace:wddsWizard> #>  #> $rights #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x55c08e587938> #> <environment: namespace:wddsWizard> #>  #> $subjects #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x55c08e588118> #> <environment: namespace:wddsWizard> #>  #> $titles #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x55c08e584ac8> #> <environment: namespace:wddsWizard> #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Name identifiers — prep_nameIdentifiers","title":"Prepare Name identifiers — prep_nameIdentifiers","text":"Persistent identifiers associated creator.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Name identifiers — prep_nameIdentifiers","text":"","code":"prep_nameIdentifiers(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Name identifiers — prep_nameIdentifiers","text":"x Data frame \"creators\"","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Name identifiers — prep_nameIdentifiers","text":"data frame nameIdentifiers column list","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Name identifiers — prep_nameIdentifiers","text":"Name identifiers datacite array objects properties \"nameIdentifier\", \"nameIdentifierScheme\" , \"schemeUri\". function takes name identifiers fields restructures list within data frame.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare an object — prep_object","title":"Prepare an object — prep_object","text":"Converts named vector, list, data frame list, optionally unboxes , recorded object.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare an object — prep_object","text":"","code":"prep_object(x, unbox = FALSE)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare an object — prep_object","text":"x named vector, list, data frame unbox logical items unboxed (arrays)?","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare an object — prep_object","text":"List formatted objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare an object — prep_object","text":"Note unboxing work items 1:1 key value pair. dataframe multiple rows list  multiple values given position, work.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare an object — prep_object","text":"","code":"cars_small  <- datasets::cars[1:10,]  # creates an array of objects where each # row is an object cars_small |>   jsonlite::toJSON(pretty = TRUE) #> [ #>   { #>     \"speed\": 4, #>     \"dist\": 2 #>   }, #>   { #>     \"speed\": 4, #>     \"dist\": 10 #>   }, #>   { #>     \"speed\": 7, #>     \"dist\": 4 #>   }, #>   { #>     \"speed\": 7, #>     \"dist\": 22 #>   }, #>   { #>     \"speed\": 8, #>     \"dist\": 16 #>   }, #>   { #>     \"speed\": 9, #>     \"dist\": 10 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 18 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 26 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 34 #>   }, #>   { #>     \"speed\": 11, #>     \"dist\": 17 #>   } #> ]   # creates an object with 2 arrays prep_object(cars_small) |>   jsonlite::toJSON(pretty = TRUE) #> { #>   \"speed\": [4, 4, 7, 7, 8, 9, 10, 10, 10, 11], #>   \"dist\": [2, 10, 4, 22, 16, 10, 18, 26, 34, 17] #> }   # this makes no difference x <- list(\"hello\" = 1:10, \"world\" = \"Earth\")  prep_object(x) |>   jsonlite::toJSON(pretty = TRUE) #> { #>   \"hello\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], #>   \"world\": [\"Earth\"] #> }"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare publication year items — prep_publicationYear","title":"Prepare publication year items — prep_publicationYear","text":"wrapper prep atomic","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare publication year items — prep_publicationYear","text":"","code":"prep_publicationYear(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare publication year items — prep_publicationYear","text":"x Named vector, data frame, list","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare publication year items — prep_publicationYear","text":"unboxed dataframe 1 row","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare publication year items — prep_publicationYear","text":"","code":"pub_year <- data.frame(\"publicationYear\" = \"2025\")  prep_language(pub_year) #> [x] \"2025\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare rights — prep_rights","title":"Prepare rights — prep_rights","text":"Prepares array objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare rights — prep_rights","text":"","code":"prep_rights(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare rights — prep_rights","text":"x named list, vector, data.frame 1:1 name:value pairs","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare rights — prep_rights","text":"list unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare rights — prep_rights","text":"","code":"wddsWizard::becker_project_metadata$rights |> prep_rights() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 1 #>   rights #> * <chr>  #> 1 CC0    #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare subjects — prep_subjects","title":"Prepare subjects — prep_subjects","text":"Subjects keywords describing work. Prepares array objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare subjects — prep_subjects","text":"","code":"prep_subjects(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare subjects — prep_subjects","text":"x named list, vector, data.frame 1:1 name:value pairs","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare subjects — prep_subjects","text":"list unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare subjects — prep_subjects","text":"","code":"wddsWizard::becker_project_metadata$subjects |> prep_subjects() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 1 #>   subject    #> * <chr>      #> 1 Proteomics #>  #> [[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 1 #>   subject         #> * <chr>           #> 1 Immune Response #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Titles — prep_titles","title":"Prepare Titles — prep_titles","text":"Prepares array objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Titles — prep_titles","text":"","code":"prep_titles(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Titles — prep_titles","text":"x list tibbles/data frames tibble/data frame","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Titles — prep_titles","text":"list single row unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Titles — prep_titles","text":"","code":"wddsWizard::becker_project_metadata$titles |> prep_titles() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 × 1 #>   title                                                                        #> * <chr>                                                                        #> 1 Serum proteomics of coronavirus shedding in vampire bats (Desmodus rotundus) #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_required_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Wildlife Disease Data Standard required fields — schema_required_fields","title":"Wildlife Disease Data Standard required fields — schema_required_fields","text":"See data standard JSON file field descriptions. vector required fields entire schema.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_required_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wildlife Disease Data Standard required fields — schema_required_fields","text":"","code":"schema_required_fields"},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_required_fields.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wildlife Disease Data Standard required fields — schema_required_fields","text":"object class character length 8.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Wildlife Disease Data Standard — wdds_schema","title":"Wildlife Disease Data Standard — wdds_schema","text":"See data standard JSON file field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wildlife Disease Data Standard — wdds_schema","text":"","code":"wdds_schema"},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_schema.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wildlife Disease Data Standard — wdds_schema","text":"object class list length 7.","code":""}]
