[{"path":"https://viralemergence.github.io/wddsWizard/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 wddsWizard authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"required-fields","dir":"Articles","previous_headings":"","what":"Required fields","title":"Wildlife Disease Data","text":"following fields required data.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"read-in-and-clean-up-the-excel-spreadsheet","dir":"Articles","previous_headings":"","what":"Read in and Clean up the excel spreadsheet","title":"Wildlife Disease Data","text":"","code":"## read  becker_data <- wdds_example_data(version = \"latest\",file = \"Becker_demo_dataset.xlsx\") |>  readxl::read_xlsx()  becker_data_prelim <- janitor::clean_names(becker_data,case = \"lower_camel\")"},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"check-for-required-fields","dir":"Articles","previous_headings":"Read in and Clean up the excel spreadsheet","what":"Check for required Fields","title":"Wildlife Disease Data","text":"","code":"# check that required fields are in dataset required_field_check <- wddsWizard::disease_data_required_fields %in% names(becker_data_prelim)  wddsWizard::disease_data_required_fields[!required_field_check] #> [1] \"sampleID\"               \"sampleCollectionMethod\""},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"rename-fields-to-match-standard","dir":"Articles","previous_headings":"Read in and Clean up the excel spreadsheet","what":"Rename Fields to match standard","title":"Wildlife Disease Data","text":"","code":"becker_data_prelim$collectionMethod #> [1] \"Oral swab\"   \"Rectal swab\"  becker_data_clean <- becker_data_prelim |>   dplyr::rename(     \"sampleID\" = \"sampleId\",     \"animalID\" = \"animalId\",     \"collectionMethodAndOrTissue\" = \"collectionMethod\"   )  # check that all required fields are in the data all(wddsWizard::disease_data_required_fields %in% names(becker_data_clean)) #> [1] FALSE"},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"prep-for-json","dir":"Articles","previous_headings":"","what":"Prep for JSON","title":"Wildlife Disease Data","text":"","code":"becker_prepped <- prep_data(becker_data_clean)  ## wrap the prepped data in list becker_data_json <- becker_prepped |>   jsonlite::toJSON(pretty = TRUE)"},{"path":"https://viralemergence.github.io/wddsWizard/articles/disease_data.html","id":"validate-disease-data","dir":"Articles","previous_headings":"","what":"Validate disease data","title":"Wildlife Disease Data","text":"","code":"## get the schema -- notice that you can set the version of the schema  schema <-  wdds_json(version = \"latest\",file = \"schemas/disease_data.json\")  dd_validator <- jsonvalidate::json_validator(schema,engine = \"ajv\")  dd_validation <- dd_validator(becker_data_json,verbose = TRUE)  ## check for errors!  errors <- attributes(dd_validation)  if(!dd_validation){   errors$errors   } else {   print(\"Valid project metadata!üòÅ\") } #>   instancePath schemaPath  keyword        missingProperty #> 1              #/required required sampleCollectionMethod #>                                                message #> 1 must have required property 'sampleCollectionMethod' #>                                                                                                                                                  schema #> 1 sampleID, latitude, longitude, sampleCollectionMethod, hostIdentification, detectionTarget, detectionMethod, detectionOutcome, parasiteIdentification #>                           parentSchema.$schema    parentSchema.title #> 1 https://json-schema.org/draft/2020-12/schema Wildlife Disease Data #>                                                         parentSchema.description #> 1 Schema for Wildlife Disease Data. This a general and extensible data standard. #>   parentSchema.type #> 1            object #>                                                                                                                                                                                                                                                                                                                                                                                                                                       parentSchema.properties.sampleID.description #> 1 A researcher-generated unique ID for the sample: usually a unique string of both characters and integers (e.g., OS BZ19-114 to indicate an oral swab taken from animal BZ19-114; see worked example below), to avoid conflicts that can arise when datasets are merged with number-only notation for samples. Ideally, sample names should be kept consistent across all online databases and physical resources (e.g., museum collections or project-specific sample archives). #>   parentSchema.properties.sampleID.type #> 1                                 array #>   parentSchema.properties.sampleID.items.type #> 1                                string, null #>   parentSchema.properties.sampleID.items.minItems #> 1                                               1 #>                                                                                                                                                                                                                                                                                       parentSchema.properties.animalID.description #> 1 A researcher-generated unique ID for the individual animal from which the sample was collected: usually a unique string of both characters and integers (e.g., BZ19-114 to indicate animal 114 sampled in 2019 in Belize). Ideally, animal names should again be kept consistent across online databases and physical resources. #>   parentSchema.properties.animalID.type #> 1                                 array #>   parentSchema.properties.animalID.items.type #> 1                                string, null #>   parentSchema.properties.animalID.items.minItems #> 1                                               1 #>                                                          parentSchema.properties.latitude.description #> 1 Latitude of the collection site in decimal format. See http://rs.tdwg.org/dwc/terms/decimalLatitude #>   parentSchema.properties.latitude.type #> 1                                 array #>   parentSchema.properties.latitude.items.type #> 1                                number, null #>   parentSchema.properties.latitude.items.minItems #> 1                                               1 #>   parentSchema.properties.latitude.items.maximum #> 1                                             90 #>   parentSchema.properties.latitude.items.minimum #> 1                                            -90 #>                                                            parentSchema.properties.longitude.description #> 1 Longitude of the collection site  in decimal format. See http://rs.tdwg.org/dwc/terms/decimalLongitude #>   parentSchema.properties.longitude.type #> 1                                  array #>   parentSchema.properties.longitude.items.type #> 1                                 number, null #>   parentSchema.properties.longitude.items.minItems #> 1                                                1 #>   parentSchema.properties.longitude.items.maximum #> 1                                             180 #>   parentSchema.properties.longitude.items.minimum #> 1                                            -180 #>                                                                                                                                                           parentSchema.properties.spatialUncertainty.description #> 1 Coordinate uncertainty from GPS recordings, post-hoc digitization, or systematic alterations (e.g., jittering or rounding) expressed in meters. See http://rs.tdwg.org/dwc/terms/coordinateUncertaintyInMeters #>   parentSchema.properties.spatialUncertainty.type #> 1                                           array #>   parentSchema.properties.spatialUncertainty.items.type #> 1                                          number, null #>   parentSchema.properties.spatialUncertainty.items.minItems #> 1                                                         1 #>   parentSchema.properties.spatialUncertainty.items.minimum #> 1                                                        0 #>                                                parentSchema.properties.collectionDay.description #> 1 The day of the month on which the specimen was collected. See http://rs.tdwg.org/dwc/terms/day #>   parentSchema.properties.collectionDay.type #> 1                                      array #>   parentSchema.properties.collectionDay.items.type #> 1                                    integer, null #>   parentSchema.properties.collectionDay.items.minItems #> 1                                                    1 #>   parentSchema.properties.collectionDay.items.minimum #> 1                                                   1 #>   parentSchema.properties.collectionDay.items.maximum #> 1                                                  31 #>                                     parentSchema.properties.collectionMonth.description #> 1 The month in which the specimen was collected. See http://rs.tdwg.org/dwc/terms/month #>   parentSchema.properties.collectionMonth.type #> 1                                        array #>   parentSchema.properties.collectionMonth.items.type #> 1                                      integer, null #>   parentSchema.properties.collectionMonth.items.minItems #> 1                                                      1 #>   parentSchema.properties.collectionMonth.items.minimum #> 1                                                     1 #>   parentSchema.properties.collectionMonth.items.maximum #> 1                                                    12 #>                                    parentSchema.properties.collectionYear.description #> 1 The year in which the specimen was collected. See http://rs.tdwg.org/dwc/terms/year #>   parentSchema.properties.collectionYear.type #> 1                                       array #>   parentSchema.properties.collectionYear.type #> 1                               integer, null #>                                                                                            parentSchema.properties.sampleCollectionMethod.description #> 1 The technique used to acquire the sample and/or the tissue from which the sample was acquired (e.g. visual inspection; swab; wing punch; necropsy). #>   parentSchema.properties.sampleCollectionMethod.examples #> 1           visual inspection, swab, wing punch, necropsy #>   parentSchema.properties.sampleCollectionMethod.type #> 1                                               array #>   parentSchema.properties.sampleCollectionMethod.items.type #> 1                                                    string #>   parentSchema.properties.sampleCollectionMethod.items.minItems #> 1                                                             1 #>                                            parentSchema.properties.sampleMaterial.description #> 1 Organic tissue or fluid being collected (e.g., ‚Äúliver‚Äù; ‚Äúblood‚Äù; ‚Äúskin‚Äù; ‚Äúwhole organism‚Äù). #>   parentSchema.properties.sampleMaterial.examples #> 1              liver, blood, skin, whole organism #>   parentSchema.properties.sampleMaterial.type #> 1                                       array #>   parentSchema.properties.sampleMaterial.items.type #> 1                                      string, null #>   parentSchema.properties.sampleMaterial.items.minItems #> 1                                                     1 #>                                     parentSchema.properties.sampleCollectionBodyPart.description #> 1 Part of the animal body that samples are generated or collected from (e.g., ‚Äúrectum‚Äù; ‚Äúwing‚Äù). #>   parentSchema.properties.sampleCollectionBodyPart.examples #> 1                                              rectum, wing #>   parentSchema.properties.sampleCollectionBodyPart.type #> 1                                                 array #>   parentSchema.properties.sampleCollectionBodyPart.items.type #> 1                                                string, null #>   parentSchema.properties.sampleCollectionBodyPart.items.minItems #> 1                                                               1 #>                                                                                                                                                                                                                                                                                                                                                                            parentSchema.properties.hostIdentification.description #> 1 The Linnaean classification of the animal from which the sample was collected, reported at the lowest possible level (ideally, species binomial name: e.g., Odocoileus virginianus or Ixodes scapularis). As necessary, researchers may also include an additional field indicating when uncertainty exists in the identification of the host organism (see Adding new fields). See http://rs.tdwg.org/dwc/terms/scientificName #>   parentSchema.properties.hostIdentification.type #> 1                                           array #>   parentSchema.properties.hostIdentification.items.type #> 1                                          string, null #>   parentSchema.properties.hostIdentification.items.minItems #> 1                                                         1 #>   parentSchema.properties.hostIdentification.items.pattern #> 1                        [HOMOhomo]{4} [SAPIENSsapiens]{7} #>                                                              parentSchema.properties.organismSex.description #> 1 The sex of the individual animal from which the sample was collected. See http://rs.tdwg.org/dwc/terms/sex #>   parentSchema.properties.organismSex.examples #> 1                  male, female, hermaphrodite #>   parentSchema.properties.organismSex.type #> 1                                    array #>   parentSchema.properties.organismSex.items.type #> 1                                   string, null #>   parentSchema.properties.organismSex.items.minItems #> 1                                                  1 #>                                                                                                                                                                                        parentSchema.properties.liveCapture.description #> 1 Whether the individual animal from which the sample was collected was alive at the time of capture. Should be TRUE or FALSE; lethal sampling should be recorded as TRUE as this field describes the organism at the time of capture. #>   parentSchema.properties.liveCapture.type #> 1                                    array #>   parentSchema.properties.liveCapture.items.type #> 1                                  boolean, null #>   parentSchema.properties.liveCapture.items.minItems #> 1                                                  1 #>                                                                                                                        parentSchema.properties.hostLifeStage.description #> 1 The life stage of the animal from which the sample was collected (as appropriate for the organism) (e.g., juvenile, adult). See http://rs.tdwg.org/dwc/terms/lifeStage #>   parentSchema.properties.hostLifeStage.examples #> 1                         juvenile, adult, larva #>   parentSchema.properties.hostLifeStage.type #> 1                                      array #>   parentSchema.properties.hostLifeStage.items.type #> 1                                     string, null #>   parentSchema.properties.hostLifeStage.items.minItems #> 1                                                    1 #>                                                                                                           parentSchema.properties.age.description #> 1 The numeric age of the animal from which the sample was collected, at the time of sample collection, if known (e.g., in monitored populations). #>   parentSchema.properties.age.type parentSchema.properties.age.items.type #> 1                            array                           number, null #>   parentSchema.properties.age.items.minItems #> 1                                          1 #>   parentSchema.properties.age.items.minimum #> 1                                         0 #>          parentSchema.properties.ageUnits.description #> 1 The units in which age is measured (usually years). #>   parentSchema.properties.ageUnits.type #> 1                                 array #>   parentSchema.properties.ageUnits.items.type #> 1                                string, null #>        parentSchema.properties.ageUnits.items.enum #> 1 years, months, days, hours, minutes, seconds, NA #>   parentSchema.properties.ageUnits.items.minItems #> 1                                               1 #>                                                        parentSchema.properties.mass.description #> 1 The mass of the animal from which the sample was collected, at the time of sample collection. #>   parentSchema.properties.mass.type parentSchema.properties.mass.items.type #> 1                             array                            number, null #>   parentSchema.properties.mass.items.minItems #> 1                                           1 #>   parentSchema.properties.mass.items.minimum #> 1                                          0 #>    parentSchema.properties.massUnits.description #> 1 The units that mass is recorded in (e.g., kg). #>   parentSchema.properties.massUnits.examples #> 1             kg, g, mg, kilogram, milligram #>   parentSchema.properties.massUnits.type #> 1                                  array #>   parentSchema.properties.massUnits.items.type #> 1                                 string, null #>   parentSchema.properties.massUnits.items.minItems #> 1                                                1 #>                                                                parentSchema.properties.length.description #> 1 The numeric length of the animal from which the sample was collected, at the time of sample collection. #>   parentSchema.properties.length.type parentSchema.properties.length.items.type #> 1                               array                              number, null #>   parentSchema.properties.length.items.minItems #> 1                                             1 #>   parentSchema.properties.length.items.minimum #> 1                                            0 #>                                                                          parentSchema.properties.lengthMeasurement.description #> 1 The axis of measurement for the organism being measured (e.g., snout-vent length or just SVL; wing length; primary feather). #>          parentSchema.properties.lengthMeasurement.examples #> 1 snout-vent length, intertegular distance, primary feather #>   parentSchema.properties.lengthMeasurement.type #> 1                                          array #>   parentSchema.properties.lengthMeasurement.items.type #> 1                                         string, null #>   parentSchema.properties.lengthMeasurement.items.minItems #> 1                                                        1 #>        parentSchema.properties.lengthUnits.description #> 1 The units that length is recorded in (e.g., meters). #>   parentSchema.properties.lengthUnits.examples #> 1                           mm, meters, cm, km #>   parentSchema.properties.lengthUnits.type #> 1                                    array #>   parentSchema.properties.lengthUnits.items.type #> 1                                   string, null #>   parentSchema.properties.lengthUnits.items.minItems #> 1                                                  1 #>                                                             parentSchema.properties.organismQuantity.description #> 1 A number or enumeration value for the quantity of organisms. See http://rs.tdwg.org/dwc/terms/organismQuantity #>   parentSchema.properties.organismQuantity.examples #> 1                                    1.0, 1.4, 12.0 #>   parentSchema.properties.organismQuantity.type #> 1                                         array #>   parentSchema.properties.organismQuantity.items.type #> 1                                        number, null #>   parentSchema.properties.organismQuantity.items.minItems #> 1                                                       1 #>   parentSchema.properties.organismQuantity.items.minimum #> 1                                                      0 #>                                                                   parentSchema.properties.organismQuantityUnits.description #> 1 The units that organism quantity is recorded in (e.g. ‚Äúindividuals‚Äù). See http://rs.tdwg.org/dwc/iri/organismQuantityType #>   parentSchema.properties.organismQuantityUnits.examples #> 1              individual, biomass, Braun-Blanquet scale #>   parentSchema.properties.organismQuantityUnits.type #> 1                                              array #>   parentSchema.properties.organismQuantityUnits.items.type #> 1                                             string, null #>   parentSchema.properties.organismQuantityUnits.items.minItemsparentSchema.properties.detectionTarget.description #> 1 The taxonomic identity of the parasite being screened for in the sample. This will often be coarser than the identity of a specific parasite identified in the sample: for example, in a study screening for novel bat coronaviruses, the entire family Coronaviridae might be the target; in a parasite dissection, the targets might be Acanthocephala, Cestoda, Nematoda, and Trematoda. For deep sequencing approaches (e.g., metagenomic and metatranscriptomic viral discovery), researchers should report each alignment target used as a new test to maximize reporting of negative data, or alternatively, select a subset that reflect specific study objectives and the focus of analysis (e.g., specific viral families). See http://rs.tdwg.org/dwc/terms/associatedOccurrences #>   parentSchema.properties.detectionTarget.type #> 1                                        array #>   parentSchema.properties.detectionTarget.items.type #> 1                                       string, null #>   parentSchema.properties.detectionTarget.items.minItems #> 1                                                      1 #>                                                       parentSchema.properties.detectionMethod.description #> 1 The type of test performed to detect the parasite or parasite-specific antibody (e.g., 'qPCR', ‚ÄòELISA‚Äô) #>   parentSchema.properties.detectionMethod.type #> 1                                        array #>   parentSchema.properties.detectionMethod.items.type #> 1                                       string, null #>   parentSchema.properties.detectionMethod.items.minItems #> 1                                                      1 #>                                                                                                                               parentSchema.properties.forwardPrimerSequence.description #> 1 The sequence of the forward primer used for parasite detection (e.g., for a pan-coronavirus primer: 5‚Äô CDCAYGARTTYTGYTCNCARC 3'). (Strongly encouraged if applicable, e.g., for PCR.) #>   parentSchema.properties.forwardPrimerSequence.examples #> 1                            5‚Äô CDCAYGARTTYTGYTCNCARC 3' #>   parentSchema.properties.forwardPrimerSequence.type #> 1                                              array #>   parentSchema.properties.forwardPrimerSequence.items.type #> 1                                             string, null #>   parentSchema.properties.forwardPrimerSequence.items.minItems #> 1                                                            1 #>                                                                                               parentSchema.properties.reversePrimerSequence.description #> 1 The sequence of the reverse primer used for parasite detection (e.g., 5‚Äô RHGGRTANGCRTCWATDGC 3'). (Strongly encouraged if applicable, e.g., for PCR.) #>   parentSchema.properties.reversePrimerSequence.examples #> 1                              5‚Äô RHGGRTANGCRTCWATDGC 3' #>   parentSchema.properties.reversePrimerSequence.type #> 1                                              array #>   parentSchema.properties.reversePrimerSequence.items.type #> 1                                             string, null #>   parentSchema.properties.reversePrimerSequence.items.minItems #> 1                                                            1 #>                     parentSchema.properties.geneTarget.description #> 1 The parasite gene targeted by the primer (e.g. ‚ÄúRdRp‚Äù for PCR.). #>   parentSchema.properties.geneTarget.examples #> 1                                        RdRp #>   parentSchema.properties.geneTarget.type #> 1                                   array #>   parentSchema.properties.geneTarget.items.type #> 1                                  string, null #>   parentSchema.properties.geneTarget.items.minItems #> 1                                                 1 #>                                                   parentSchema.properties.primerCitation.description #> 1 Citation(s) for the primer(s) (ideally doi, or other permanent identifier for a work, e.g. PMID).  #>                                                                                                                                                                                                                                      parentSchema.properties.primerCitation.examples #> 1 https://doi.org/10.1016/j.virol.2007.06.009, Complete genome sequence of bat coronavirus HKU2 from Chinese horseshoe bats revealed a much smaller spike gene with a different evolutionary lineage from the rest of the genome, PMC7103351, https://openalex.org/works/w2036144053 #>   parentSchema.properties.primerCitation.type #> 1                                       array #>   parentSchema.properties.primerCitation.items.type #> 1                                      string, null #>   parentSchema.properties.primerCitation.items.minItems #> 1                                                     1 #>                                                     parentSchema.properties.probeTarget.description #> 1 Antibody or antigen targeted for detection. (Strongly encouraged if applicable, e.g., for ELISA.) #>   parentSchema.properties.probeTarget.type #> 1                                    array #>   parentSchema.properties.probeTarget.items.type #> 1                                   string, null #>   parentSchema.properties.probeTarget.items.minItems #> 1                                                  1 #>                                                   parentSchema.properties.probeType.description #> 1 Antibody or antigen used for detection. (Strongly encouraged if applicable, e.g., for ELISA.) #>   parentSchema.properties.probeType.type #> 1                                  array #>   parentSchema.properties.probeType.items.type #> 1                                 string, null #>   parentSchema.properties.probeType.items.minItems #> 1                                                1 #>                                                   parentSchema.properties.probeCitation.description #> 1 Citation(s) for the probe(s) (ideally doi, or other permanent identifier for a work, e.g. PMID).  #>   parentSchema.properties.probeCitation.type #> 1                                      array #>   parentSchema.properties.probeCitation.items.type #> 1                                     string, null #>   parentSchema.properties.probeCitation.items.minItems #> 1                                                    1 #>                                                                                                                                                   parentSchema.properties.detectionOutcome.description #> 1 The test result (i.e., positive, negative, or inconclusive). To avoid ambiguity, these specific values are suggested over numeric values (0 or 1). See http://rs.tdwg.org/dwc/terms/occurrenceStatus #>   parentSchema.properties.detectionOutcome.type #> 1                                         array #>   parentSchema.properties.detectionOutcome.items.type #> 1                                        string, null #>   parentSchema.properties.detectionOutcome.items.minItems #> 1                                                       1 #>                                                                                                             parentSchema.properties.detectionMeasurement.description #> 1 Any numeric measurement of parasite detection that is more detailed than simple positive or negative results (e.g., viral titer, parasite counts, sequence reads). #>   parentSchema.properties.detectionMeasurement.type #> 1                                             array #>   parentSchema.properties.detectionMeasurement.items.type #> 1                                            number, null #>   parentSchema.properties.detectionMeasurement.items.minItems #> 1                                                           1 #>                                                         parentSchema.properties.detectionMeasurementUnits.description #> 1 Units for quantitative measurements of parasite intensity or test results (e.g., Ct, TCID50/mL, or parasite count). #>   parentSchema.properties.detectionMeasurementUnits.examples #> 1                              Ct, TCID50/mL, parasite count #>   parentSchema.properties.detectionMeasurementUnits.type #> 1                                                  array #>   parentSchema.properties.detectionMeasurementUnits.items.type #> 1                                                 string, null #>   parentSchema.properties.detectionMeasurementUnits.items.minItems #> 1                                                                1 #>                                                                                                                                                                                                                                                                          parentSchema.properties.parasiteIdentification.description #> 1 The identity of a parasite detected by the test, if any, reported to the lowest possible taxonomic level, either as a Linnaean binomial classification or within the convention of a relevant taxonomic authority (e.g., Borrelia burgdorferi or Zika virus). Parasite identification may be more specific than detection target. #>   parentSchema.properties.parasiteIdentification.examples #> 1   Zika virus, Borrelia burgdorferi, Onchocerca volvulus #>   parentSchema.properties.parasiteIdentification.type #> 1                                               array #>   parentSchema.properties.parasiteIdentification.items.type #> 1                                              string, null #>   parentSchema.properties.parasiteIdentification.items.minItems #> 1                                                             1 #>                                                                                                                                                                                                parentSchema.properties.parasiteID.description #> 1 A researcher-generated unique ID for an individual parasite (primarily useful in nested cases where this ID is used as an animal ID in another row, such as pathogen  testing of a blood-feeding arthropod removed from a vertebrate host). #>   parentSchema.properties.parasiteID.examples #> 1                             001, TICK201923 #>   parentSchema.properties.parasiteID.type #> 1                                   array #>   parentSchema.properties.parasiteID.items.type #> 1                                  string, null #>   parentSchema.properties.parasiteID.items.minItems #> 1                                                 1 #>                                                                           parentSchema.properties.parasiteLifeStage.description #> 1 The life stage of the parasite from which the sample was collected (as appropriate for the organism) (e.g., juvenile, adult). #>   parentSchema.properties.parasiteLifeStage.examples #> 1                        juvenile, adult, sporozoite #>   parentSchema.properties.parasiteLifeStage.type #> 1                                          array #>   parentSchema.properties.parasiteLifeStage.items.type #> 1                                         string, null #>   parentSchema.properties.parasiteLifeStage.items.minItems #> 1                                                        1 #>                                                                                                                                                                                                                                                     parentSchema.properties.genbankAccession.description #> 1 The GenBank accession for any parasite genetic sequence(s), if appropriate.  Accession numbers or other identifiers for related data stored on another platform should be added in a different field (e.g. GISAID Accession, Immport Accession). See http://rs.tdwg.org/dwc/terms/otherCatalogNumbers  #>   parentSchema.properties.genbankAccession.examples #> 1                           U49845 | U49846, U11111 #>   parentSchema.properties.genbankAccession.type #> 1                                         array #>   parentSchema.properties.genbankAccession.items.type #> 1                                        string, null #>   parentSchema.properties.genbankAccession.items.minItems #> 1                                                       1 #>                                                                                                                                   parentSchema.required #> 1 sampleID, latitude, longitude, sampleCollectionMethod, hostIdentification, detectionTarget, detectionMethod, detectionOutcome, parasiteIdentification #>   parentSchema.dependentRequired.mass parentSchema.dependentRequired.length #> 1                           massUnits        lengthUnits, lengthMeasurement #>   parentSchema.dependentRequired.organismQuantity #> 1                           organismQuantityUnits #>   parentSchema.dependentRequired.detectionMeasurement          data.sampleID #> 1                           detectionMeasurementUnits OS BZ19-95, RS BZ19-95 #>        data.animalID    data.latitude     data.longitude data.collectionDay #> 1 BZ19-114, BZ19-114 17.7643, 17.7643 -88.6521, -88.6521             23, 23 #>   data.collectionMonth data.collectionYear data.collectionMethodAndOrTissue #> 1                 4, 4          2019, 2019           Oral swab, Rectal swab #>                data.hostIdentification data.organismSex data.deadOrAlive #> 1 Desmodus rotundus, Desmodus rotundus       male, male     alive, alive #>   data.hostLifeStage    data.mass data.massUnits         data.detectionTarget #> 1 subadult, subadult 0.023, 0.023         kg, kg Coronaviridae, Coronaviridae #>               data.detectionMethod data.primerSequence #> 1 semi-nested PCR, semi-nested PCR          RdRp, RdRp #>                          data.primerCitation data.detectionOutcome #> 1 doi:10.3390/v9120364, doi:10.3390/v9120364    positive, negative #>   data.parasiteIdentification data.genBankAccession dataPath #> 1        Alphacoronavirus, NA          OM240578, NA"},{"path":"https://viralemergence.github.io/wddsWizard/articles/project_metadata.html","id":"required-fields","dir":"Articles","previous_headings":"","what":"Required fields","title":"Project Metadata","text":"following fields required data.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/project_metadata.html","id":"load-in-the-csv-and-clean-it-up","dir":"Articles","previous_headings":"","what":"Load in the CSV and clean it up","title":"Project Metadata","text":"example data requires light cleaning make transforming csv easier.","code":"project_metadata  <- wdds_example_data(version = \"latest\",file = \"example_project_metadata.csv\") |> read.csv()  ## turn empty strings into NAs in the group field project_metadata <- project_metadata |>   dplyr::mutate(Group = dplyr::case_when(     Group != \"\" ~ Group,     TRUE ~ NA   ))   ## use `fill` to complete the items column and `mutate` to make groups a little ## more ergonomic   project_metadata_filled <- tidyr::fill(data = project_metadata,Group)"},{"path":"https://viralemergence.github.io/wddsWizard/articles/project_metadata.html","id":"restructure-data","dir":"Articles","previous_headings":"","what":"Restructure data","title":"Project Metadata","text":"validation schema expecting JSON, restructure data list can converted JSON. Creators, Resources, Funding References, possible multiple entities group. example data, two creators three funding references. need pull entity_ids creators funding references clean Group field can used general category Creators, Resources, Funding References.","code":"# get ids for components of a group. project_metadata_ids <- project_metadata_filled |>   dplyr::mutate(     entity_id = stringr::str_extract(string = Group,pattern = \"[0-9]\"),     # make sure that there are no NA entity IDs     entity_id = dplyr::case_when(       is.na(entity_id) ~ \"1\",       TRUE ~ entity_id     )   ) |>   # drop entity ids from group field and convert to camel case    dplyr::mutate(Group = stringr::str_replace_all(string = Group,pattern = \" [0-9]\", replacement = \"\"),                  Group = snakecase::to_lower_camel_case(Group))   ## split dataframe by Group for further processing   project_metadata_list  <- split(project_metadata_ids,project_metadata_ids$Group)   # The `get_entity` function creates standard entities that will be easier to transform json  project_metadata_list_entities <- purrr::map(project_metadata_list,function(x){   if(all(x$entity_id == \"1\")){     out <- get_entity(x)     return(out)   }      x_list <- split(x,x$entity_id)   names(x_list) <- NULL   out <-purrr::map(x_list, get_entity)   return(out) })"},{"path":"https://viralemergence.github.io/wddsWizard/articles/project_metadata.html","id":"make-the-json","dir":"Articles","previous_headings":"","what":"Make the json!","title":"Project Metadata","text":"simpler world - just run following code work. datacite‚Äôs structures complex, need prep. Luckily, host prep functions already exist package! mostly tag list items jsonlite::unbox /wrap things lists converted json, match data standard‚Äôs expected formats.","code":"## if only, if only the mockingbird sings jsonlite::toJSON(project_metadata_list_entities,pretty = TRUE,dataframe = \"columns\") project_metadata_json <- prep_for_json(project_metadata_list_entities) |>   jsonlite::toJSON(pretty  = TRUE)"},{"path":"https://viralemergence.github.io/wddsWizard/articles/project_metadata.html","id":"validate-project-metadata","dir":"Articles","previous_headings":"","what":"Validate Project metadata","title":"Project Metadata","text":"can validate entire project metadata object using project_metadata.json schema.","code":"schema <- wdds_json(version = \"latest\", file = \"schemas/project_metadata.json\")  project_validator <- jsonvalidate::json_validator(schema,engine = \"ajv\")  project_validation <- project_validator(project_metadata_json,verbose = TRUE)  ## check for errors!  errors <- attributes(project_validation)  if(!project_validation){   errors$errors   } else {   print(\"Valid project metadata!üòÅ\") } #> [1] \"Valid project metadata!üòÅ\""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Schema Overview","text":"document provides background information data standards, json-schemas general structure Wildlife Disease Data standard specifically.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"what-is-a-json-schema","dir":"Articles","previous_headings":"Summary","what":"What is a JSON-schema","title":"Schema Overview","text":"JSON-schema human machine readable document defines data standard describing structure, properties, constraints dataset. us accustomed thinking spreadsheet files data frames, property roughly equivalent field column. JSON-schema defines rules around type data used particular property (character, numeric, logical, etc), values (e.g.¬†massUnits must one kg, mg, g; latitude must -90 90; sampleID must unique). schema also describes fields combined coherent whole (.e.¬†structure dataset). JSON-schema, fields can parent child relationships. field may schema. example, data property standard defines data object flat table constraints, types, /requirements. way, JSON-schema allows construction modular schema documents can leverage existing schemas (e.g.¬†darwin core, datacite). created schema, can validate data . validation process happens via validation engine tells us data conform standard. data conform, validation engine tells us precisely data non-conformant data standard expected see. detailed information see JSON-Schema.org","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"wildlife-disease-data-standard-wdds-structure","dir":"Articles","previous_headings":"","what":"Wildlife Disease Data Standard (WDDS) Structure","title":"Schema Overview","text":"Wildlife Disease Data Standard composed two sub-schemas (1) disease_data (2) project_metadata. disease_data describes structure contents wildlife disease data. certain required fields extensible. data stored tidy dataset flat file like CSV. component standard relies heavily Darwin Core data standard. project_metadata describes structure contents descriptive metadata. , metadata project enables discovery, identification, attribution. component standard relies heavily Data Cite Metadata Schema. Researchers may validate data sub-schema separately, use tandem validate entire data package. term ‚Äúdata package‚Äù refers list JSON object contains disease_data project_metadata components.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"important-vocabulary","dir":"Articles","previous_headings":"","what":"Important vocabulary","title":"Schema Overview","text":"Property: synonymous field column table. property corresponds particular attribute (e.g.¬†age, collectedBy, latitude, etc) data.Required: property must included given schema object within schema.Type: Type data. Common values include array, object, string, number, integer, null, boolean.Array: comma separated group values. Similar vector R little flexible.Array Items: Array items define acceptable values array. - minItems - many items must present array - minimum - inclusive - smallest value allowed array - maximum - inclusive - largest value allowed array - enum - controlled vocabulary array","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"terms","dir":"Articles","previous_headings":"","what":"Terms","title":"Schema Overview","text":"list terms data standard. created directly wdds_schema.json file reflects structure file. disease_data project_metadata top level properties schema, many sub-properties. item marked REQUIRED must included.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"disease_data","dir":"Articles","previous_headings":"","what":"disease_data","title":"Schema Overview","text":"Type: objectDescription: REQUIRED Wildlife disease data. Stored tidy form.Required Fields: sampleID, latitude, longitude, sampleCollectionMethod, hostIdentification, detectionTarget, detectionMethod, detectionOutcome, parasiteIdentificationReference: schemas/disease_data.json type: string, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 maximum: 90 minimum: -90 type: number, null minItems: 1 maximum: 180 minimum: -180 type: number, null minItems: 1 minimum: 0 type: integer, null minItems: 1 minimum: 1 maximum: 31 type: integer, null minItems: 1 minimum: 1 maximum: 12 type: integer, null type: string minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 : [HOMOhomo]{4} [SAPIENSsapiens]{7} type: string, null minItems: 1 type: boolean, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null enum: years, months, days, hours, minutes, seconds minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"project_metadata","dir":"Articles","previous_headings":"","what":"project_metadata","title":"Schema Overview","text":"Type: objectDescription: REQUIRED Metadata project largely follows Datacite data standard.Required Fields: methodology, creators, titles, publicationYear, language, descriptions, fundingReferencesReference: schemas/project_metadata.json Type: objectDescription: REQUIRED broad categorization data collected.Properties: eventBased Type: booleanDescription: Whether research conducted response known suspected infectious disease outbreak, observed animal morbidity mortality, etc. archival Type: booleanDescription: Whether samples archival source (e.g., museum collections, biobanks). Type: arrayDescription: REQUIRED full names creators. format familyName, givenName.Array Items Type: stringDescription: REQUIRED DataCite name Type: stringDescription: DataCite nameType Type: stringDescription: DataCite givenName Type: stringDescription: DataCite familyName Type: arrayDescription: DataCite nameIdentifiersArray Items nameIdentifier Type: stringDescription: REQUIRED DataCite nameIdentifier nameIdentifierScheme Type: stringDescription: REQUIRED DataCite nameIdentifierScheme schemeUri Type: stringDescription: DataCite schemeUri Type: arrayDescription: DataCite affiliationArray Items name Type: stringDescription: REQUIRED DataCite name affiliationIdentifier Type: stringDescription: DataCite affiliationIdentifier affiliationIdentifierScheme Type: stringDescription: DataCite affiliationIdentifierScheme schemeUri Type: stringDescription: DataCite schemeUri Type: stringDescription: DataCite lang Type: arrayDescription: REQUIRED name title resource known.Array Items title Type: stringDescription: REQUIRED DataCite title titleType Type: stringDescription: DataCite titleType lang Type: stringDescription: DataCite lang Type: arrayDescription: unique string identifies resource.Array Items identifier Type: stringDescription: REQUIRED DataCite identifier identifierType Type: stringDescription: DataCite identifierType Type: arrayDescription: Subject, keyword, classification code, key phrase describing resource.Array Items subject Type: stringDescription: REQUIRED DataCite subject subjectScheme Type: stringDescription: DataCite subjectScheme schemeUri Type: stringDescription: DataCite schemeUri valueUri Type: stringDescription: DataCite valueUri classificationCode Type: stringDescription: DataCite classificationCode lang Type: stringDescription: DataCite lang Type: stringDescription: REQUIRED year data made publicly available. Type: arrayDescription: rights information resource.Array Items rights Type: stringDescription: DataCite rights rightsUri Type: stringDescription: DataCite rightsUri rightsIdentifier Type: stringDescription: DataCite rightsIdentifier rightsIdentifierScheme Type: stringDescription: DataCite rightsIdentifierScheme schemeUri Type: stringDescription: DataCite schemeUri lang Type: stringDescription: DataCite lang Type: arrayDescription: REQUIRED additional information fit categories. May used technical information detailed information associated scientific instrument.Array Items description Type: stringDescription: REQUIRED DataCite description descriptionType Type: stringDescription: REQUIRED DataCite descriptionType lang Type: stringDescription: DataCite lang Type: stringDescription: REQUIRED primary language resource. Type: arrayDescription: REQUIRED Name identifying information funding provider.Array Items funderName Type: stringDescription: REQUIRED DataCite funderName funderIdentifier Type: stringDescription: DataCite funderIdentifier funderIdentifierType Type: stringDescription: DataCite funderIdentifierType awardNumber Type: stringDescription: DataCite awardNumber awardUri Type: stringDescription: DataCite awardUri awardTitle Type: stringDescription: DataCite awardTitle Type: arrayDescription: DataCite relatedIdentifiersArray Items Type: stringDescription: REQUIRED DataCite relationType Type: stringDescription: DataCite relatedMetadataScheme Type: stringDescription: DataCite schemeUri Type: stringDescription: DataCite schemeType Type: stringDescription: DataCite resourceTypeGeneral Type: stringDescription: REQUIRED DataCite relatedIdentifier Type: stringDescription: REQUIRED DataCite relatedIdentifierType","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"disease_data-1","dir":"Articles","previous_headings":"","what":"disease_data","title":"Schema Overview","text":"Type: objectDescription: REQUIRED Wildlife disease data. Stored tidy form.Required Fields: sampleID, latitude, longitude, sampleCollectionMethod, hostIdentification, detectionTarget, detectionMethod, detectionOutcome, parasiteIdentificationReference: schemas/disease_data.json type: string, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 maximum: 90 minimum: -90 type: number, null minItems: 1 maximum: 180 minimum: -180 type: number, null minItems: 1 minimum: 0 type: integer, null minItems: 1 minimum: 1 maximum: 31 type: integer, null minItems: 1 minimum: 1 maximum: 12 type: integer, null type: string minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 : [HOMOhomo]{4} [SAPIENSsapiens]{7} type: string, null minItems: 1 type: boolean, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null enum: years, months, days, hours, minutes, seconds minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"project_metadata-1","dir":"Articles","previous_headings":"","what":"project_metadata","title":"Schema Overview","text":"Type: objectDescription: REQUIRED Metadata project largely follows Datacite data standard.Required Fields: methodology, creators, titles, publicationYear, language, descriptions, fundingReferencesReference: schemas/project_metadata.json Type: objectDescription: REQUIRED broad categorization data collected.Properties: eventBased Type: booleanDescription: Whether research conducted response known suspected infectious disease outbreak, observed animal morbidity mortality, etc. archival Type: booleanDescription: Whether samples archival source (e.g., museum collections, biobanks). Type: arrayDescription: REQUIRED full names creators. format familyName, givenName.Array Items Type: stringDescription: REQUIRED DataCite name Type: stringDescription: DataCite nameType Type: stringDescription: DataCite givenName Type: stringDescription: DataCite familyName Type: arrayDescription: DataCite nameIdentifiersArray Items nameIdentifier Type: stringDescription: REQUIRED DataCite nameIdentifier nameIdentifierScheme Type: stringDescription: REQUIRED DataCite nameIdentifierScheme schemeUri Type: stringDescription: DataCite schemeUri Type: arrayDescription: DataCite affiliationArray Items name Type: stringDescription: REQUIRED DataCite name affiliationIdentifier Type: stringDescription: DataCite affiliationIdentifier affiliationIdentifierScheme Type: stringDescription: DataCite affiliationIdentifierScheme schemeUri Type: stringDescription: DataCite schemeUri Type: stringDescription: DataCite lang Type: arrayDescription: REQUIRED name title resource known.Array Items title Type: stringDescription: REQUIRED DataCite title titleType Type: stringDescription: DataCite titleType lang Type: stringDescription: DataCite lang Type: arrayDescription: unique string identifies resource.Array Items identifier Type: stringDescription: REQUIRED DataCite identifier identifierType Type: stringDescription: DataCite identifierType Type: arrayDescription: Subject, keyword, classification code, key phrase describing resource.Array Items subject Type: stringDescription: REQUIRED DataCite subject subjectScheme Type: stringDescription: DataCite subjectScheme schemeUri Type: stringDescription: DataCite schemeUri valueUri Type: stringDescription: DataCite valueUri classificationCode Type: stringDescription: DataCite classificationCode lang Type: stringDescription: DataCite lang Type: stringDescription: REQUIRED year data made publicly available. Type: arrayDescription: rights information resource.Array Items rights Type: stringDescription: DataCite rights rightsUri Type: stringDescription: DataCite rightsUri rightsIdentifier Type: stringDescription: DataCite rightsIdentifier rightsIdentifierScheme Type: stringDescription: DataCite rightsIdentifierScheme schemeUri Type: stringDescription: DataCite schemeUri lang Type: stringDescription: DataCite lang Type: arrayDescription: REQUIRED additional information fit categories. May used technical information detailed information associated scientific instrument.Array Items description Type: stringDescription: REQUIRED DataCite description descriptionType Type: stringDescription: REQUIRED DataCite descriptionType lang Type: stringDescription: DataCite lang Type: stringDescription: REQUIRED primary language resource. Type: arrayDescription: REQUIRED Name identifying information funding provider.Array Items funderName Type: stringDescription: REQUIRED DataCite funderName funderIdentifier Type: stringDescription: DataCite funderIdentifier funderIdentifierType Type: stringDescription: DataCite funderIdentifierType awardNumber Type: stringDescription: DataCite awardNumber awardUri Type: stringDescription: DataCite awardUri awardTitle Type: stringDescription: DataCite awardTitle Type: arrayDescription: DataCite relatedIdentifiersArray Items Type: stringDescription: REQUIRED DataCite relationType Type: stringDescription: DataCite relatedMetadataScheme Type: stringDescription: DataCite schemeUri Type: stringDescription: DataCite schemeType Type: stringDescription: DataCite resourceTypeGeneral Type: stringDescription: REQUIRED DataCite relatedIdentifier Type: stringDescription: REQUIRED DataCite relatedIdentifierType","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"disease_data-2","dir":"Articles","previous_headings":"","what":"disease_data","title":"Schema Overview","text":"Type: objectDescription: REQUIRED Wildlife disease data. Stored tidy form.Required Fields: sampleID, latitude, longitude, sampleCollectionMethod, hostIdentification, detectionTarget, detectionMethod, detectionOutcome, parasiteIdentificationReference: schemas/disease_data.json type: string, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 maximum: 90 minimum: -90 type: number, null minItems: 1 maximum: 180 minimum: -180 type: number, null minItems: 1 minimum: 0 type: integer, null minItems: 1 minimum: 1 maximum: 31 type: integer, null minItems: 1 minimum: 1 maximum: 12 type: integer, null type: string minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 : [HOMOhomo]{4} [SAPIENSsapiens]{7} type: string, null minItems: 1 type: boolean, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null enum: years, months, days, hours, minutes, seconds minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 minimum: 0 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: number, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1 type: string, null minItems: 1","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/schema_overview.html","id":"project_metadata-2","dir":"Articles","previous_headings":"","what":"project_metadata","title":"Schema Overview","text":"Type: objectDescription: REQUIRED Metadata project largely follows Datacite data standard.Required Fields: methodology, creators, titles, publicationYear, language, descriptions, fundingReferencesReference: schemas/project_metadata.json Type: objectDescription: REQUIRED broad categorization data collected.Properties: eventBased Type: booleanDescription: Whether research conducted response known suspected infectious disease outbreak, observed animal morbidity mortality, etc. archival Type: booleanDescription: Whether samples archival source (e.g., museum collections, biobanks). Type: arrayDescription: REQUIRED full names creators. format familyName, givenName.Array Items Type: stringDescription: REQUIRED DataCite name Type: stringDescription: DataCite nameType Type: stringDescription: DataCite givenName Type: stringDescription: DataCite familyName Type: arrayDescription: DataCite nameIdentifiersArray Items nameIdentifier Type: stringDescription: REQUIRED DataCite nameIdentifier nameIdentifierScheme Type: stringDescription: REQUIRED DataCite nameIdentifierScheme schemeUri Type: stringDescription: DataCite schemeUri Type: arrayDescription: DataCite affiliationArray Items name Type: stringDescription: REQUIRED DataCite name affiliationIdentifier Type: stringDescription: DataCite affiliationIdentifier affiliationIdentifierScheme Type: stringDescription: DataCite affiliationIdentifierScheme schemeUri Type: stringDescription: DataCite schemeUri Type: stringDescription: DataCite lang Type: arrayDescription: REQUIRED name title resource known.Array Items title Type: stringDescription: REQUIRED DataCite title titleType Type: stringDescription: DataCite titleType lang Type: stringDescription: DataCite lang Type: arrayDescription: unique string identifies resource.Array Items identifier Type: stringDescription: REQUIRED DataCite identifier identifierType Type: stringDescription: DataCite identifierType Type: arrayDescription: Subject, keyword, classification code, key phrase describing resource.Array Items subject Type: stringDescription: REQUIRED DataCite subject subjectScheme Type: stringDescription: DataCite subjectScheme schemeUri Type: stringDescription: DataCite schemeUri valueUri Type: stringDescription: DataCite valueUri classificationCode Type: stringDescription: DataCite classificationCode lang Type: stringDescription: DataCite lang Type: stringDescription: REQUIRED year data made publicly available. Type: arrayDescription: rights information resource.Array Items rights Type: stringDescription: DataCite rights rightsUri Type: stringDescription: DataCite rightsUri rightsIdentifier Type: stringDescription: DataCite rightsIdentifier rightsIdentifierScheme Type: stringDescription: DataCite rightsIdentifierScheme schemeUri Type: stringDescription: DataCite schemeUri lang Type: stringDescription: DataCite lang Type: arrayDescription: REQUIRED additional information fit categories. May used technical information detailed information associated scientific instrument.Array Items description Type: stringDescription: REQUIRED DataCite description descriptionType Type: stringDescription: REQUIRED DataCite descriptionType lang Type: stringDescription: DataCite lang Type: stringDescription: REQUIRED primary language resource. Type: arrayDescription: REQUIRED Name identifying information funding provider.Array Items funderName Type: stringDescription: REQUIRED DataCite funderName funderIdentifier Type: stringDescription: DataCite funderIdentifier funderIdentifierType Type: stringDescription: DataCite funderIdentifierType awardNumber Type: stringDescription: DataCite awardNumber awardUri Type: stringDescription: DataCite awardUri awardTitle Type: stringDescription: DataCite awardTitle Type: arrayDescription: DataCite relatedIdentifiersArray Items Type: stringDescription: REQUIRED DataCite relationType Type: stringDescription: DataCite relatedMetadataScheme Type: stringDescription: DataCite schemeUri Type: stringDescription: DataCite schemeType Type: stringDescription: DataCite resourceTypeGeneral Type: stringDescription: REQUIRED DataCite relatedIdentifier Type: stringDescription: REQUIRED DataCite relatedIdentifierType","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"the-whole-game","dir":"Articles","previous_headings":"","what":"The Whole game","title":"Getting Started","text":"Flat data files (csv/xlsx) imported R, lightly restructured, converted JSON validated Wildlife Disease Data Standard. Data sets either pass (üéâ) fail informative errors.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"Getting Started","text":"data standard designed flexible accessible. composed two components: disease data project metadata. disease data component describes contents structure data related detection () parasite given host. project metadata component describes contents structure data related creation disease data component. disease data component allows us create collection datasets can re-used, aggregated, shared, project metadata component provides context data, makes easier find dataset, gives clear information attribution use (rights/license). Using package, can validate one components data standard. helpful open Data Standard Terms separate browser tab go vignette explore templates. use templates provided, can focus field descriptions largely ignore types array items.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"templates","dir":"Articles","previous_headings":"Getting Started","what":"Templates","title":"Getting Started","text":"created several templates make easier get started using Wildlife Disease Data Standard. can make copies template files use_template function. templates may contain additional fields strictly required. Required fields clearly marked Data Standard Terms documentation. following fields required disease data: following fields required project metadata:","code":"# list templates wdds_template() #> [1] \"disease_data_template.csv\"     \"disease_data_template.xlsx\"    #> [3] \"project_metadata_template.csv\" use_template(\"disease_data_template.csv\",file_name = \"my_interesting_disease_data.csv\",open = TRUE)  use_template(\"project_metadata_template.csv\",file_name = \"my_project_metadata.csv\",open = TRUE) wddsWizard::disease_data_required_fields #> [1] \"sampleID\"               \"latitude\"               \"longitude\"              #> [4] \"sampleCollectionMethod\" \"hostIdentification\"     \"detectionTarget\"        #> [7] \"detectionMethod\"        \"detectionOutcome\"       \"parasiteIdentification\" wddsWizard::project_metadata_required_fields #> [1] \"methodology\"       \"creators\"          \"titles\"            #> [4] \"publicationYear\"   \"language\"          \"descriptions\"      #> [7] \"fundingReferences\""},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"disease-data","dir":"Articles","previous_headings":"Getting Started","what":"Disease Data","title":"Getting Started","text":"Disease data expected ‚Äútidy‚Äù form (think CSV XLS row observation column property). column table part standard validated. may include additional columns needed. Disease data project metadata can validated separately. code read csv file, light wrangling, transform data JSON, validate data.","code":"## read in the data my_disease_data <- wdds_example_data(version = \"latest\",file = \"my_interesting_disease_data.csv\") |>   read.csv()  # clean up field names to match JSON schema my_disease_data <- clean_field_names(my_disease_data)  ### Check for required Fields -  # check that all required fields are in the data all(wddsWizard::disease_data_required_fields %in% names(my_disease_data)) #> [1] TRUE  ## Prep for JSON  my_disease_data_prepped <- prep_data(my_disease_data)  ## make the JSON! my_disease_data_json <- my_disease_data_prepped |>   jsonlite::toJSON(pretty = TRUE)  ### validate the JSON   # get the schema file schema <- wdds_json(version = \"latest\",file = \"schemas/disease_data.json\")  # this creates a function that we can use to validate our data dd_validator <- jsonvalidate::json_validator(schema,engine = \"ajv\")  # use the validator to check if the disease data conforms to the disease_data component of the standard dd_validation <- dd_validator(my_disease_data_json,verbose = TRUE)  ## check for errors!  errors <- attributes(dd_validation)  if(!dd_validation){   errors$errors   } else {   print(\"Valid disease data!üòÅ\") } #> [1] \"Valid disease data!üòÅ\""},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"project-metadata","dir":"Articles","previous_headings":"Getting Started","what":"Project Metadata","title":"Getting Started","text":"Project metadata largely follow Datacite Metadata Schema. , data standard allows include additional properties. Note comfortable JSON, may easier write project metadata directly JSON. example , use project metadata created project metadata template create JSON can validated project metadata component data standard. See vignettes Project Metadata Wildlife Disease Data details preparing components.","code":"# read in project metadata created from template  my_project_metadata <- wdds_example_data(version = \"latest\",file = \"my_project_metadata.csv\") |>    read.csv()  # prepare project metadata my_project_metadata_prepped <- prep_from_metadata_template(my_project_metadata)   # check that all required fields are in the project metadata all(wddsWizard::project_metadata_required_fields %in% names(my_project_metadata_prepped)) #> [1] TRUE  # convert to json  my_project_metadata_json <- my_project_metadata_prepped |>   jsonlite::toJSON(pretty  = TRUE)  # validate against project metadata schema  schema <- wdds_json(version = \"latest\",file = \"schemas/project_metadata.json\")  pm_validator <- jsonvalidate::json_validator(schema,engine = \"ajv\")  pm_validation <- pm_validator(my_project_metadata_json,verbose = TRUE)  ## check for errors!  errors <- attributes(pm_validation)  if(!pm_validation){   errors$errors   } else {   print(\"Valid project metadata!üòÅ\") } #> [1] \"Valid project metadata!üòÅ\""},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"combine-disease-data-and-project-metadata","dir":"Articles","previous_headings":"","what":"Combine disease data and project metadata","title":"Getting Started","text":"Finally check disease data project metadata standard.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"combine-components","dir":"Articles","previous_headings":"Combine disease data and project metadata","what":"Combine components","title":"Getting Started","text":"first thing combine disease data project metadata components list check required fields.","code":"## use append so that you do not add levels to your list  data_package <- list(disease_data = my_disease_data_prepped,                      project_metadata = my_project_metadata_prepped)  # check that all required fields are in the data  req_field_check <- wddsWizard::schema_required_fields %in% names(data_package)  if(all(!req_field_check)){   wddsWizard::schema_required_fields[!req_field_check]   } else {   print(\"all required fields present ü•≥\") } #> [1] \"all required fields present ü•≥\""},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"make-json","dir":"Articles","previous_headings":"Combine disease data and project metadata","what":"Make JSON","title":"Getting Started","text":"Next convert data_package can validated.","code":"# convert to json  data_package_json <- jsonlite::toJSON(data_package,pretty = TRUE)"},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"validate-your-json","dir":"Articles","previous_headings":"Combine disease data and project metadata","what":"Validate your json!","title":"Getting Started","text":"use {jsonvalidate} package make sure data_package_json conforms wildlife disease data standard.","code":"schema <- wdds_json(version = \"latest\", file = \"wdds_schema.json\")  wdds_validator <- jsonvalidate::json_validator(schema,engine = \"ajv\")  project_validation <- wdds_validator(data_package_json,verbose = TRUE)  if(project_validation){   print(\"Your data package is valid! üéä \") } else { errors <- attributes(project_validation) errors$errors } #> [1] \"Your data package is valid! üéä \""},{"path":"https://viralemergence.github.io/wddsWizard/articles/wddsWizard.html","id":"handling-errors","dir":"Articles","previous_headings":"Combine disease data and project metadata","what":"Handling Errors","title":"Getting Started","text":"‚Äôre going get ","code":""},{"path":"https://viralemergence.github.io/wddsWizard/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Collin Schwantes. Author, maintainer.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schwantes C (2025). wddsWizard: Data Wizard minimal Wildlife Disease Data Standard. R package version 0.0.2, https://viralemergence.github.io/wddsWizard/.","code":"@Manual{,   title = {wddsWizard: Data Wizard for a minimal Wildlife Disease Data Standard},   author = {Collin Schwantes},   year = {2025},   note = {R package version 0.0.2},   url = {https://viralemergence.github.io/wddsWizard/}, }"},{"path":"https://viralemergence.github.io/wddsWizard/index.html","id":"wddswizard-","dir":"","previous_headings":"","what":"Data Wizard for a minimal Wildlife Disease Data Standard","title":"Data Wizard for a minimal Wildlife Disease Data Standard","text":"R package validating data Wildlife Disease Data Standard. allows users restructure validate data sets. See Getting Started information use package.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Wizard for a minimal Wildlife Disease Data Standard","text":"Install github.","code":"devtools::install_github(\"viralemergence/wddsWizard\")"},{"path":"https://viralemergence.github.io/wddsWizard/index.html","id":"why-do-we-need-a-data-standard","dir":"","previous_headings":"","what":"Why do we need a data standard?","title":"Data Wizard for a minimal Wildlife Disease Data Standard","text":"Data standards facilitate sharing, (re)use, aggregation data humans machines use common structure, set properties, vocabulary. Using data standard makes easier share datasets reproduce results. Data standards facilitate sharing lowering effort takes document dataset. Sharing data makes easier reproduce results. Sharing data especially important disciplines like disease ecology producing datasets resource intensive limited, making unlikely someone able replicate field work sake verifying finding. able reproduce results increases confidence findings allows others (likely original dataset producers) build results. Compliance data standard eases data interpretation. data validated standard, researcher knows fields dataset meet set definitions data conform certain structure. Researchers can also identify deviations standard readily descriptions examples provided standard. Compliant datasets can aggregated datasets meet data standard. number datasets use standard grows, questions researchers can ask data changes. example, datasets describing disease incidence pathogen dozens locations across multiple regions, can explore general modeling frameworks pathogen using unified dataset. using data standard can contribute virtuous cycle promotes high quality open reproducible science sharing, reuse, aggregation datasets.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/index.html","id":"how-do-i-use-this-package-and-the-wildlife-disease-data-standard","dir":"","previous_headings":"","what":"How do I use this package and the Wildlife Disease Data Standard?","title":"Data Wizard for a minimal Wildlife Disease Data Standard","text":"package can used explore Wildlife Disease Data Standard validate data. See preprint minimum data standard wildlife disease studies discussions appropriate use complex data structures (e.g.¬†pooled samples, parasites arthropod vector, etc.). See Getting Started vignette code examples hands approach getting familiar package.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/index.html","id":"starting-from-scratch---dont-have-any-data-yet","dir":"","previous_headings":"How do I use this package and the Wildlife Disease Data Standard?","what":"Starting from scratch - don‚Äôt have any data, yet!","title":"Data Wizard for a minimal Wildlife Disease Data Standard","text":"strongly recommend creating Data Management Plan (DMP) beginning project seriously considering data life cycle project. Use CSV templates data standard guide storing data. Make sure least minimum required fields captured data collection, match data standard. Lab field data may immediately come ‚Äútidy‚Äù format long properties captured data remain disaggregated (1 row = 1 observation), possible reshape data compatible standard.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/index.html","id":"starting-from-an-existing-project---ive-got-data","dir":"","previous_headings":"How do I use this package and the Wildlife Disease Data Standard?","what":"Starting from an existing project - I‚Äôve got data!?","title":"Data Wizard for a minimal Wildlife Disease Data Standard","text":"potentially challenging starting scratch requires harmonizing data data standard. First, check data can disaggregated 1 row = 1 observation tidy data model. , cross-walk fields data properties standard make sure data contain required fields. Next, start reshape single, tidy, table. need re-name fields correspond standard.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/index.html","id":"validating-your-data","dir":"","previous_headings":"How do I use this package and the Wildlife Disease Data Standard?","what":"Validating your data","title":"Data Wizard for a minimal Wildlife Disease Data Standard","text":"package vignettes describing move CSV/excel JSON project metadata wildlife disease data.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/index.html","id":"how-does-validation-work","dir":"","previous_headings":"","what":"How does validation work?","title":"Data Wizard for a minimal Wildlife Disease Data Standard","text":"package uses JSON schemas AJV engine validation. See Schema Overview information data standard json schemas.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/batch_download_deposit_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch download deposit versions ‚Äî batch_download_deposit_versions","title":"Batch download deposit versions ‚Äî batch_download_deposit_versions","text":"download_deposit_version wrapped purr::pmap call.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/batch_download_deposit_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch download deposit versions ‚Äî batch_download_deposit_versions","text":"","code":"batch_download_deposit_versions(df = list_deposit_versions(), dir_path)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/batch_download_deposit_versions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch download deposit versions ‚Äî batch_download_deposit_versions","text":"df Data frame. structure output list_deposit_versions dir_path Character. Path folder files downloaded.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/batch_download_deposit_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch download deposit versions ‚Äî batch_download_deposit_versions","text":"List download locations.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_disease_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Becker et al. dataset ‚Äî becker_disease_data","title":"Becker et al. dataset ‚Äî becker_disease_data","text":"bat coronavirus dataset conforms wildlife disease data standard. See data standard field descriptions","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_disease_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Becker et al. dataset ‚Äî becker_disease_data","text":"","code":"becker_disease_data"},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_disease_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Becker et al. dataset ‚Äî becker_disease_data","text":"object class tbl_df (inherits tbl, data.frame) 2 rows 21 columns.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_disease_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Becker et al. dataset ‚Äî becker_disease_data","text":"https://pharos.viralemergence.org/projects/?prj=prjRPayEvMecN","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_project_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Becker et al. project metadata ‚Äî becker_project_metadata","title":"Becker et al. project metadata ‚Äî becker_project_metadata","text":"project metadata bat coronavirus dataset conforms wildlife disease data standard. See data standard field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_project_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Becker et al. project metadata ‚Äî becker_project_metadata","text":"","code":"becker_project_metadata"},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_project_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Becker et al. project metadata ‚Äî becker_project_metadata","text":"object class list length 11.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/becker_project_metadata.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Becker et al. project metadata ‚Äî becker_project_metadata","text":"https://www.ebi.ac.uk/pride/archive/projects/PXD031075","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/clean_field_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Field Names ‚Äî clean_field_names","title":"Clean Field Names ‚Äî clean_field_names","text":"Clean Field Names","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/clean_field_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Field Names ‚Äî clean_field_names","text":"","code":"clean_field_names(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/clean_field_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Field Names ‚Äî clean_field_names","text":"x Data frame named object","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/clean_field_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Field Names ‚Äî clean_field_names","text":"object names snakecase::to_lower_camel_case format","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/clean_field_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Field Names ‚Äî clean_field_names","text":"","code":"df  <- data.frame(\"Sample ID\"= 1:10, \"Name\"= \"Fred\", \"Host Identification\"= \"Pinus strobus\")  clean_field_names(df) #>    sampleID name hostIdentification #> 1         1 Fred      Pinus strobus #> 2         2 Fred      Pinus strobus #> 3         3 Fred      Pinus strobus #> 4         4 Fred      Pinus strobus #> 5         5 Fred      Pinus strobus #> 6         6 Fred      Pinus strobus #> 7         7 Fred      Pinus strobus #> 8         8 Fred      Pinus strobus #> 9         9 Fred      Pinus strobus #> 10       10 Fred      Pinus strobus"},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_object_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Docs Section for a schema object ‚Äî create_object_docs","title":"Create Docs Section for a schema object ‚Äî create_object_docs","text":"Create Docs Section schema object","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_object_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Docs Section for a schema object ‚Äî create_object_docs","text":"","code":"create_object_docs(x, idx, required_fields, schema_dir)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_object_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Docs Section for a schema object ‚Äî create_object_docs","text":"x List. Schema property definition idx Name schema property required_fields Character. Vector required fields schema_dir Character. directory schema stored","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_object_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Docs Section for a schema object ‚Äî create_object_docs","text":"Character formatted markdown text","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_object_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list from a schema object ‚Äî create_object_list","title":"Create a list from a schema object ‚Äî create_object_list","text":"Creates data.frame fields name type","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_object_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list from a schema object ‚Äî create_object_list","text":"","code":"create_object_list(x, idx, schema_dir)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_object_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list from a schema object ‚Äî create_object_list","text":"x List. Schema property definition idx Name schema property schema_dir Character. directory schema stored","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_object_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list from a schema object ‚Äî create_object_list","text":"data frame type name","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Documentation for a schema ‚Äî create_schema_docs","title":"Create Documentation for a schema ‚Äî create_schema_docs","text":"Produces nested markdown documents schema. recursive set function","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Documentation for a schema ‚Äî create_schema_docs","text":"","code":"create_schema_docs(schema_path = the$current_schema_path, sep = \"\\n\")"},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Documentation for a schema ‚Äî create_schema_docs","text":"schema_path Character. Path json-schema sep Character. separator used paste_reduce*","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Documentation for a schema ‚Äî create_schema_docs","text":"character vector markdown text","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_docs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Documentation for a schema ‚Äî create_schema_docs","text":"","code":"create_schema_docs() #> Warning: cannot open file '/tmp/Rtmp2zYAbQ/R.INSTALL1b453f4df6cb/wddsWizard/inst/extdata/wdds_schema/wdds_schema.json': No such file or directory #> Error in open.connection(con, \"rb\"): cannot open the connection"},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an expanded schema object ‚Äî create_schema_list","title":"Create an expanded schema object ‚Äî create_schema_list","text":"Produces list data frame name type schema. recursive set function may expanded get properties.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an expanded schema object ‚Äî create_schema_list","text":"","code":"create_schema_list(schema_path = the$current_schema_path)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an expanded schema object ‚Äî create_schema_list","text":"schema_path Character. Path json-schema","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an expanded schema object ‚Äî create_schema_list","text":"character vector markdown text","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/create_schema_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an expanded schema object ‚Äî create_schema_list","text":"","code":"create_schema_list() #> Warning: cannot open file '/tmp/Rtmp2zYAbQ/R.INSTALL1b453f4df6cb/wddsWizard/inst/extdata/wdds_schema/wdds_schema.json': No such file or directory #> Error in open.connection(con, \"rb\"): cannot open the connection"},{"path":"https://viralemergence.github.io/wddsWizard/reference/datacite_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Datacite Data Stadnard ‚Äî datacite_schema","title":"Datacite Data Stadnard ‚Äî datacite_schema","text":"See data standard JSON file field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/datacite_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Datacite Data Stadnard ‚Äî datacite_schema","text":"","code":"datacite_schema"},{"path":"https://viralemergence.github.io/wddsWizard/reference/datacite_schema.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Datacite Data Stadnard ‚Äî datacite_schema","text":"object class list length 9.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/disease_data_required_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Required fields in the disease data object ‚Äî disease_data_required_fields","title":"Required fields in the disease data object ‚Äî disease_data_required_fields","text":"See data standard JSON file field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/disease_data_required_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required fields in the disease data object ‚Äî disease_data_required_fields","text":"","code":"disease_data_required_fields"},{"path":"https://viralemergence.github.io/wddsWizard/reference/disease_data_required_fields.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Required fields in the disease data object ‚Äî disease_data_required_fields","text":"object class character length 9.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/disease_data_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Wildlife Disease Data Standard - data ‚Äî disease_data_schema","title":"Wildlife Disease Data Standard - data ‚Äî disease_data_schema","text":"See data standard JSON file field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/disease_data_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wildlife Disease Data Standard - data ‚Äî disease_data_schema","text":"","code":"disease_data_schema"},{"path":"https://viralemergence.github.io/wddsWizard/reference/disease_data_schema.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wildlife Disease Data Standard - data ‚Äî disease_data_schema","text":"object class list length 7.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/download_deposit_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Download deposit version ‚Äî download_deposit_version","title":"Download deposit version ‚Äî download_deposit_version","text":"Downloads extracts version deposit. function specific structure wdds repo.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/download_deposit_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download deposit version ‚Äî download_deposit_version","text":"","code":"download_deposit_version(zenodo_id, version, latest_version, dir_path)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/download_deposit_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download deposit version ‚Äî download_deposit_version","text":"zenodo_id String. ID Zenodo deposit. correspond version deposit. version String. Version number/id deposit (e.g. v.1.1.1). latest_version Logical. Indicates work designated latest version. dir_path String. Path directory files downloaded e.g. \"inst/extdata/wdds_archive\" note trailing slash path.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/download_deposit_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download deposit version ‚Äî download_deposit_version","text":"String. Path downloaded version.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get entity ‚Äî get_entity","title":"Get entity ‚Äî get_entity","text":"get_entity function creates standard entities easier transform json.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get entity ‚Äî get_entity","text":"","code":"get_entity(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get entity ‚Äî get_entity","text":"x data frame. \"long\" form data frame fields Group, entity_id, Value, variable.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get entity ‚Äî get_entity","text":"data frame \"wide\" form","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get entity ‚Äî get_entity","text":"Pivots data long wide formats column names.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_entity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get entity ‚Äî get_entity","text":"","code":"df <- data.frame(Group = 1, entity_id = 1, Value = 1:3, Variable = letters[1:3])  get_entity(df) #> # A tibble: 1 √ó 3 #>       a     b     c #>   <int> <int> <int> #> 1     1     2     3"},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Get schema references ‚Äî get_ref","title":"Get schema references ‚Äî get_ref","text":"Parses $ref calls schema. Can retrieve internal ('\"$ref\":\"#/definitions/someDef\") external references ('\"$ref\":\"schemas/datacite/datacite.json\"').","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get schema references ‚Äî get_ref","text":"","code":"get_ref(x, schema_dir)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get schema references ‚Äî get_ref","text":"x List. Must property \"$ref\" schema_dir Character. Directory current schema.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get schema references ‚Äî get_ref","text":"List Character. Character returned entire schema referenced.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get schema references ‚Äî get_ref","text":"external references, can handle pointers references entire schemas. function navigates parent child schemas manipulating variables  package environment .","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get schema references ‚Äî get_ref_list","title":"Get schema references ‚Äî get_ref_list","text":"Parses $ref calls schema. Can retrieve internal ('\"$ref\":\"#/definitions/someDef\") external references ('\"$ref\":\"schemas/datacite/datacite.json\"').","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get schema references ‚Äî get_ref_list","text":"","code":"get_ref_list(x, schema_dir)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get schema references ‚Äî get_ref_list","text":"x List. Must property \"$ref\" schema_dir Character. Directory current schema.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get schema references ‚Äî get_ref_list","text":"data frame name type.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_ref_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get schema references ‚Äî get_ref_list","text":"external references, can handle pointers references entire schemas. function navigates parent child schemas manipulating variables package environment .","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_required_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the required fields ‚Äî get_required_fields","title":"Get the required fields ‚Äî get_required_fields","text":"Gets required fields object schema","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_required_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the required fields ‚Äî get_required_fields","text":"","code":"get_required_fields(schema_list)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_required_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the required fields ‚Äî get_required_fields","text":"schema_list List jsonlite::read_json","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/get_required_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the required fields ‚Äî get_required_fields","text":"character vector required fields","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/increase_docs_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Increase documentation depth ‚Äî increase_docs_depth","title":"Increase documentation depth ‚Äî increase_docs_depth","text":"Pads left side list items extra 4 spaces","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/increase_docs_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Increase documentation depth ‚Äî increase_docs_depth","text":"","code":"increase_docs_depth(string)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/increase_docs_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Increase documentation depth ‚Äî increase_docs_depth","text":"string Character. item parsed","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/increase_docs_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Increase documentation depth ‚Äî increase_docs_depth","text":"character","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/list_deposit_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"List Versions of a deposit on Zenodo ‚Äî list_deposit_versions","title":"List Versions of a deposit on Zenodo ‚Äî list_deposit_versions","text":"function list versions deposit associated parent id. parent id used identify set works different versions work. parent id provided Zenodo API. download JSON representation deposit (export json), attribute json called parent looks like \"https://zenodo.org/api/records/15020049\". 8 digit string end url parent id.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/list_deposit_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Versions of a deposit on Zenodo ‚Äî list_deposit_versions","text":"","code":"list_deposit_versions(parent_id = \"15020049\")"},{"path":"https://viralemergence.github.io/wddsWizard/reference/list_deposit_versions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Versions of a deposit on Zenodo ‚Äî list_deposit_versions","text":"parent_id String. Identifier Zenodo deposit multiple versions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/list_deposit_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Versions of a deposit on Zenodo ‚Äî list_deposit_versions","text":"Data frame. data frame contains Zenodo id version deposit, well version name, logical field called latest indicates latest version.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/minimal_disease_data.html","id":null,"dir":"Reference","previous_headings":"","what":"An example of minimal disease data ‚Äî minimal_disease_data","title":"An example of minimal disease data ‚Äî minimal_disease_data","text":"minimal disease data example. data frame minimal items required disease data.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/minimal_disease_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example of minimal disease data ‚Äî minimal_disease_data","text":"","code":"minimal_disease_data"},{"path":"https://viralemergence.github.io/wddsWizard/reference/minimal_disease_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example of minimal disease data ‚Äî minimal_disease_data","text":"object class data.frame 3 rows 13 columns.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/minimal_project_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"An example of minimal project metadata ‚Äî minimal_project_metadata","title":"An example of minimal project metadata ‚Äî minimal_project_metadata","text":"minimal project metadata example. list minimal items required project metadata.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/minimal_project_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An example of minimal project metadata ‚Äî minimal_project_metadata","text":"","code":"minimal_project_metadata"},{"path":"https://viralemergence.github.io/wddsWizard/reference/minimal_project_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example of minimal project metadata ‚Äî minimal_project_metadata","text":"object class list length 7.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste Reduce ‚Äî paste_reduce","title":"Paste Reduce ‚Äî paste_reduce","text":"paste function can used purrr::reduce build nested documentation items","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste Reduce ‚Äî paste_reduce","text":"","code":"paste_reduce(x, y, sep = \"\\n\")"},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste Reduce ‚Äî paste_reduce","text":"x Character y Character sep Character","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste Reduce ‚Äî paste_reduce","text":"Character","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste Reduce ‚Äî paste_reduce","text":"","code":"text_a <- \"hello\" text_b <- \"world\" paste_reduce(text_a,text_b) #> [1] \"hello\\nworld\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce_ul.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste Reduce unordered list item ‚Äî paste_reduce_ul","title":"Paste Reduce unordered list item ‚Äî paste_reduce_ul","text":"paste function can used purrr::reduce build nested documentation items","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce_ul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste Reduce unordered list item ‚Äî paste_reduce_ul","text":"","code":"paste_reduce_ul(x, y, sep = \"\\n - \")"},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce_ul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste Reduce unordered list item ‚Äî paste_reduce_ul","text":"x Character y Character sep Character","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce_ul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste Reduce unordered list item ‚Äî paste_reduce_ul","text":"Character","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/paste_reduce_ul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste Reduce unordered list item ‚Äî paste_reduce_ul","text":"","code":"text_a <- \"hello\" text_b <- \"world\" paste_reduce_ul(text_a,text_b) #> [1] \"hello\\n - world\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":null,"dir":"Reference","previous_headings":"","what":"prep affiliation ‚Äî prep_affiliation","title":"prep affiliation ‚Äî prep_affiliation","text":"affiliations associated creator.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prep affiliation ‚Äî prep_affiliation","text":"","code":"prep_affiliation(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prep affiliation ‚Äî prep_affiliation","text":"x tibble prep_creators","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prep affiliation ‚Äî prep_affiliation","text":"tibble affilition fields list column called affilition","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_affiliation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"prep affiliation ‚Äî prep_affiliation","text":"Affiliation datacite array objects properties name, affiliationIdentifier, affiliationIdentifierScheme, schemeURI. function takes affiliation fields restructures list within dataframe. Affiliation fields converted list: \"affiliation\", #' \"affiliationIdentifier\", \"affiliationIdentifierScheme\" , \"schemeUri\"","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare an array of objects ‚Äî prep_array_objects","title":"Prepare an array of objects ‚Äî prep_array_objects","text":"wraps tibble/dataframe list /unboxes list items 1 row tibbles/dataframes. result array objects created.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare an array of objects ‚Äî prep_array_objects","text":"","code":"prep_array_objects(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare an array of objects ‚Äî prep_array_objects","text":"x list tibbles/data frames tibble/data frame","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare an array of objects ‚Äî prep_array_objects","text":"list single row unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_array_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare an array of objects ‚Äî prep_array_objects","text":"","code":"# note that you cannot unbox data frames with more than 1 row  x <- list(tibble::tibble(age = 1,group = letters[1]),           tibble::tibble(age = 2,group = letters[2]))  # running jsonlite::toJSON on an unmodified object results in # extra square brackets - an array of arrays of objects jsonlite::toJSON(x, pretty = TRUE) #> [ #>   [ #>     { #>       \"age\": 1, #>       \"group\": \"a\" #>     } #>   ], #>   [ #>     { #>       \"age\": 2, #>       \"group\": \"b\" #>     } #>   ] #> ]   # with the prepped data we get an array of objects x_prepped  <- prep_array_objects(x)  x_prepped |>   jsonlite::toJSON(pretty = TRUE) #> [ #>   { #>       \"age\": 1, #>       \"group\": \"a\" #>     }, #>   { #>       \"age\": 2, #>       \"group\": \"b\" #>     } #> ]"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare atomic ‚Äî prep_atomic","title":"Prepare atomic ‚Äî prep_atomic","text":"thin wrapper jsonlite::unbox. stops jsonlite representing single character, numeric, logical, etc. items arrays.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare atomic ‚Äî prep_atomic","text":"","code":"prep_atomic(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare atomic ‚Äî prep_atomic","text":"x vector","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare atomic ‚Äî prep_atomic","text":"unboxed dataframe 1 row","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare atomic ‚Äî prep_atomic","text":"useful property definition type string, number, logical length 1.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare atomic ‚Äî prep_atomic","text":"","code":"x <- 1  # values in x are stored in an array x|> jsonlite::toJSON() #> [1]   # output is [1]  # values in x are NOT stored in an array (no square brackets) prep_atomic(x) |>   jsonlite::toJSON() #> 1  # output is 1"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare creators ‚Äî prep_creators","title":"Prepare creators ‚Äî prep_creators","text":"creator object can complex prepare components final object (e.g. affiliation, nameIdentifiers) run prep_array_objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare creators ‚Äî prep_creators","text":"","code":"prep_creators(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare creators ‚Äî prep_creators","text":"x data frame named list.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare creators ‚Äî prep_creators","text":"List unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_creators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare creators ‚Äî prep_creators","text":"","code":"wddsWizard::becker_project_metadata$creators |>  prep_creators() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 5 #>   name             givenName familyName affiliation      nameIdentifiers  #> * <chr>            <chr>     <chr>      <list>           <list>           #> 1 Daniel J. Becker Daniel J. Becker     <tibble [1 √ó 2]> <tibble [1 √ó 2]> #>  #> [[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 4 #>   name            givenName   familyName affiliation      #> * <chr>           <chr>       <chr>      <list>           #> 1 Guang-Sheng Lei Guang-Sheng Lei        <tibble [1 √ó 2]> #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Data ‚Äî prep_data","title":"Prepare Data ‚Äî prep_data","text":"Prepares object arrays.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Data ‚Äî prep_data","text":"","code":"prep_data(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Data ‚Äî prep_data","text":"x named vector, list, data frame","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Data ‚Äî prep_data","text":"List formatted objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Data ‚Äî prep_data","text":"Note unboxing work items 1:1 key value pair. dataframe multiple rows list  multiple values given position, work.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Data ‚Äî prep_data","text":"","code":"cars_small  <- datasets::cars[1:10,]  # creates an array of objects where each # row is an object cars_small |>   jsonlite::toJSON(pretty = TRUE) #> [ #>   { #>     \"speed\": 4, #>     \"dist\": 2 #>   }, #>   { #>     \"speed\": 4, #>     \"dist\": 10 #>   }, #>   { #>     \"speed\": 7, #>     \"dist\": 4 #>   }, #>   { #>     \"speed\": 7, #>     \"dist\": 22 #>   }, #>   { #>     \"speed\": 8, #>     \"dist\": 16 #>   }, #>   { #>     \"speed\": 9, #>     \"dist\": 10 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 18 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 26 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 34 #>   }, #>   { #>     \"speed\": 11, #>     \"dist\": 17 #>   } #> ]   # creates an object with 2 arrays prep_object(cars_small) |>   jsonlite::toJSON(pretty = TRUE) #> { #>   \"speed\": [4, 4, 7, 7, 8, 9, 10, 10, 10, 11], #>   \"dist\": [2, 10, 4, 22, 16, 10, 18, 26, 34, 17] #> }   # this makes no difference x <- list(\"hello\" = 1:10, \"world\" = \"Earth\")  prep_object(x) |>   jsonlite::toJSON(pretty = TRUE) #> { #>   \"hello\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], #>   \"world\": [\"Earth\"] #> }"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare descriptions ‚Äî prep_descriptions","title":"Prepare descriptions ‚Äî prep_descriptions","text":"Wrapper prep_array_objects.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare descriptions ‚Äî prep_descriptions","text":"","code":"prep_descriptions(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare descriptions ‚Äî prep_descriptions","text":"x Data frame/Tibble containing description items","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare descriptions ‚Äî prep_descriptions","text":"List x marked unbox (make array)","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_descriptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare descriptions ‚Äî prep_descriptions","text":"","code":"x  <- wddsWizard::becker_project_metadata$descriptions  prep_descriptions(x) |> jsonlite::toJSON() #> [{\"description\":\"Bats can harbor many pathogens without showing disease. However, the mechanisms by which bats resolve these infections or limit pathology remain unclear. To illuminate the bat immune response to coronaviruses, viruses with high public health significance, we will use serum proteomics to assess broad differences in immune proteins of uninfected and infected vampire bats (Desmodus rotundus). In contrast to global profiling techniques of blood such as transcriptomics, proteomics provides a unique perspective into immunology, as the serum proteome includes proteins from not only blood but also those secreted from proximal tissues. Here, we expand our recent work on the serum proteome of wild vampire bats (Desmodus rotundus) to better understand CoV pathogenesis. Across 19 bats sampled in 2019 in northern Belize with available sera, we detected CoVs in oral or rectal swabs from four individuals. We used data independent acquisition-based mass spectrometry to profile and compare the undepleted serum proteome of these 19 bats. These results will provide much needed insight into changes in the bat serum proteome in response to coronavirus infection.\",\"descriptionType\":\"Abstract\"}]"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for json ‚Äî prep_for_json","title":"Prepare data for json ‚Äî prep_for_json","text":"Usespurrr::modify_at apply set methods specific locations list.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for json ‚Äî prep_for_json","text":"","code":"prep_for_json(x, prep_methods_list = prep_methods())"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for json ‚Äî prep_for_json","text":"x list. Named list data frames, lists, vectors. methods applied, names list items match names methods list prep_methods_list list. Named list methods items function applied corresponding items x.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for json ‚Äî prep_for_json","text":"Named list methods applied.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_for_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for json ‚Äî prep_for_json","text":"","code":"wddsWizard::becker_project_metadata |>    prep_for_json() #> $creators #> $creators[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 5 #>   name             givenName familyName affiliation      nameIdentifiers  #> * <chr>            <chr>     <chr>      <list>           <list>           #> 1 Daniel J. Becker Daniel J. Becker     <tibble [1 √ó 2]> <tibble [1 √ó 2]> #>  #> $creators[[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 4 #>   name            givenName   familyName affiliation      #> * <chr>           <chr>       <chr>      <list>           #> 1 Guang-Sheng Lei Guang-Sheng Lei        <tibble [1 √ó 2]> #>  #>  #> $descriptions #> $descriptions[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 2 #>   description                                                    descriptionType #> * <chr>                                                          <chr>           #> 1 Bats can harbor many pathogens without showing disease. Howev‚Ä¶ Abstract        #>  #>  #> $fundingReferences #> $fundingReferences[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 3 #>   funderName                  funderIdentifier                     awardNumber   #> * <chr>                       <chr>                                <chr>         #> 1 National Geographic Society http://dx.doi.org/10.13039/100006733 NGS-55503R-19 #>  #> $fundingReferences[[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 2 #>   funderName         funderIdentifier                     #> * <chr>              <chr>                                #> 1 Indiana University http://dx.doi.org/10.13039/100006733 #>  #> $fundingReferences[[3]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 2 #>   funderName            funderIdentifier                     #> * <chr>                 <chr>                                #> 1 College of Charleston http://dx.doi.org/10.13039/100009789 #>  #>  #> $identifier #> $identifier[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 2 #>   identifier            identifierType #> * <chr>                 <chr>          #> 1 10.5072/zenodo.168108 DOI            #>  #>  #> $language #> [x] \"en\" #>  #> $methodology #> $methodology$eventBased #> [x] false #>  #> $methodology$archival #> [x] false #>  #>  #> $publicationYear #> [x] \"2022\" #>  #> $relatedIdentifiers #> $relatedIdentifiers[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 3 #>   relatedIdentifier                           relatedIdentifierType relationType #> * <chr>                                       <chr>                 <chr>        #> 1 https://pharos.viralemergence.org/projects‚Ä¶ URL                   IsVersionOf  #>  #> $relatedIdentifiers[[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 3 #>   relatedIdentifier         relatedIdentifierType relationType #> * <chr>                     <chr>                 <chr>        #> 1 10.3389/fviro.2022.862961 DOI                   IsPartOf     #>  #>  #> $rights #> $rights[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 1 #>   rights #> * <chr>  #> 1 CC0    #>  #>  #> $subjects #> $subjects[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 1 #>   subject    #> * <chr>      #> 1 Proteomics #>  #> $subjects[[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 1 #>   subject         #> * <chr>           #> 1 Immune Response #>  #>  #> $titles #> $titles[[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 1 #>   title                                                                        #> * <chr>                                                                        #> 1 Serum proteomics of coronavirus shedding in vampire bats (Desmodus rotundus) #>  #>    a <- list(\"hello_world\" = 1:10 )  methods_list <- list(\"hello_world\" = function(x){x*2},                        \"unused_method\" = function(x){x/2})  prep_for_json(a,methods_list) #> $hello_world #>  [1]  2  4  6  8 10 12 14 16 18 20 #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_from_metadata_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare metadata from the metadata template ‚Äî prep_from_metadata_template","title":"Prepare metadata from the metadata template ‚Äî prep_from_metadata_template","text":"Prepare metadata metadata template","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_from_metadata_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare metadata from the metadata template ‚Äî prep_from_metadata_template","text":"","code":"prep_from_metadata_template(   project_metadata,   prep_methods_list = prep_methods() )"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_from_metadata_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare metadata from the metadata template ‚Äî prep_from_metadata_template","text":"project_metadata Data frame. correspond structure project_metadata_template.csv prep_methods_list list. Named list methods items function applied corresponding items x.Default prep_methods()","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_from_metadata_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare metadata from the metadata template ‚Äî prep_from_metadata_template","text":"Named list ready converted json","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare funding references ‚Äî prep_fundingReferences","title":"Prepare funding references ‚Äî prep_fundingReferences","text":"creates array objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare funding references ‚Äî prep_fundingReferences","text":"","code":"prep_fundingReferences(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare funding references ‚Äî prep_fundingReferences","text":"x list tibbles/data frames tibble/data frame","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare funding references ‚Äî prep_fundingReferences","text":"list single row unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_fundingReferences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare funding references ‚Äî prep_fundingReferences","text":"","code":"wddsWizard::becker_project_metadata$fundingReferences |>  prep_fundingReferences() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 3 #>   funderName                  funderIdentifier                     awardNumber   #> * <chr>                       <chr>                                <chr>         #> 1 National Geographic Society http://dx.doi.org/10.13039/100006733 NGS-55503R-19 #>  #> [[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 2 #>   funderName         funderIdentifier                     #> * <chr>              <chr>                                #> 1 Indiana University http://dx.doi.org/10.13039/100006733 #>  #> [[3]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 2 #>   funderName            funderIdentifier                     #> * <chr>                 <chr>                                #> 1 College of Charleston http://dx.doi.org/10.13039/100009789 #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep identifier ‚Äî prep_identifier","title":"Prep identifier ‚Äî prep_identifier","text":"Prepare identifier scholarly work. Wrapper prep_array_objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep identifier ‚Äî prep_identifier","text":"","code":"prep_identifier(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep identifier ‚Äî prep_identifier","text":"x data frame identifier properties","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep identifier ‚Äî prep_identifier","text":"List x marked unbox","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_identifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep identifier ‚Äî prep_identifier","text":"","code":"wddsWizard::becker_project_metadata$identifiers |> prep_identifier() #> list()"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep language ‚Äî prep_language","title":"Prep language ‚Äî prep_language","text":"Prepare language property - describe language scholarly work.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep language ‚Äî prep_language","text":"","code":"prep_language(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep language ‚Äî prep_language","text":"x named list, vector, data.frame 1:1 name:value pairs","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep language ‚Äî prep_language","text":"unboxed dataframe 1 row","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_language.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep language ‚Äî prep_language","text":"","code":"a <- data.frame(\"language\" = \"en\")  prep_language(a) #> [x] \"en\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep methodology for conversion to json ‚Äî prep_methodology","title":"Prep methodology for conversion to json ‚Äî prep_methodology","text":"Prep methodology conversion json","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep methodology for conversion to json ‚Äî prep_methodology","text":"","code":"prep_methodology(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep methodology for conversion to json ‚Äî prep_methodology","text":"x List. methodology component list","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep methodology for conversion to json ‚Äî prep_methodology","text":"properly formatted list","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methodology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep methodology for conversion to json ‚Äî prep_methodology","text":"","code":"if (FALSE) { # \\dontrun{ prepped_list <- project_metadata_list_entities  prepped_list$methodology <- prep_methodology(project_metadata_list_entities$methodology)   OR   prepped_list <- purrr::modify_at(project_metadata_list_entities,\"methodology\",prep_methodology) } # }"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare methods ‚Äî prep_methods","title":"Prepare methods ‚Äî prep_methods","text":"Collection methods preparing data conveniently named make preparing easier","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare methods ‚Äî prep_methods","text":"","code":"prep_methods()"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare methods ‚Äî prep_methods","text":"list methods","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare methods ‚Äî prep_methods","text":"","code":"prep_methods() #> $data #> function (x)  #> { #>     prep_object(x) #> } #> <bytecode: 0x5607ca454838> #> <environment: namespace:wddsWizard> #>  #> $creators #> function (x)  #> { #>     x_aff <- purrr::map(x, prep_affiliation) #>     x_nid <- purrr::map(x_aff, prep_nameIdentifiers) #>     out <- prep_array_objects(x_nid) #>     return(out) #> } #> <bytecode: 0x5607cec10a30> #> <environment: namespace:wddsWizard> #>  #> $descriptions #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x5607cd55e4d8> #> <environment: namespace:wddsWizard> #>  #> $fundingReferences #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x5607cb10d3b0> #> <environment: namespace:wddsWizard> #>  #> $identifier #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x5607cad444c8> #> <environment: namespace:wddsWizard> #>  #> $relatedIdentifiers #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x5607cb11b208> #> <environment: namespace:wddsWizard> #>  #> $language #> function (x)  #> { #>     prep_atomic(x) #> } #> <bytecode: 0x5607cb13ebc0> #> <environment: namespace:wddsWizard> #>  #> $methodology #> function (x)  #> { #>     x <- dplyr::mutate(x, eventBased = as.logical(.data$eventBased),  #>         archival = as.logical(.data$archival)) #>     prep_object(x, unbox = TRUE) #> } #> <bytecode: 0x5607cb02c280> #> <environment: namespace:wddsWizard> #>  #> $publicationYear #> function (x)  #> { #>     prep_atomic(x) #> } #> <bytecode: 0x5607cffb46b8> #> <environment: namespace:wddsWizard> #>  #> $rights #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x5607cfedf450> #> <environment: namespace:wddsWizard> #>  #> $subjects #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x5607cf8c0018> #> <environment: namespace:wddsWizard> #>  #> $titles #> function (x)  #> { #>     prep_array_objects(x) #> } #> <bytecode: 0x5607cfeddce8> #> <environment: namespace:wddsWizard> #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Name identifiers ‚Äî prep_nameIdentifiers","title":"Prepare Name identifiers ‚Äî prep_nameIdentifiers","text":"Persistent identifiers associated creator.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Name identifiers ‚Äî prep_nameIdentifiers","text":"","code":"prep_nameIdentifiers(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Name identifiers ‚Äî prep_nameIdentifiers","text":"x Data frame \"creators\"","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Name identifiers ‚Äî prep_nameIdentifiers","text":"data frame nameIdentifiers column list","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_nameIdentifiers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Name identifiers ‚Äî prep_nameIdentifiers","text":"Name identifiers datacite array objects properties \"nameIdentifier\", \"nameIdentifierScheme\" , \"schemeUri\". function takes name identifiers fields restructures list within data frame.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare an object ‚Äî prep_object","title":"Prepare an object ‚Äî prep_object","text":"Converts named vector, list, data frame list, optionally unboxes , recorded object.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare an object ‚Äî prep_object","text":"","code":"prep_object(x, unbox = FALSE)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare an object ‚Äî prep_object","text":"x named vector, list, data frame unbox logical items unboxed (arrays)?","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare an object ‚Äî prep_object","text":"List formatted objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare an object ‚Äî prep_object","text":"Note unboxing work items 1:1 key value pair. dataframe multiple rows list  multiple values given position, work.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare an object ‚Äî prep_object","text":"","code":"cars_small  <- datasets::cars[1:10,]  # creates an array of objects where each # row is an object cars_small |>   jsonlite::toJSON(pretty = TRUE) #> [ #>   { #>     \"speed\": 4, #>     \"dist\": 2 #>   }, #>   { #>     \"speed\": 4, #>     \"dist\": 10 #>   }, #>   { #>     \"speed\": 7, #>     \"dist\": 4 #>   }, #>   { #>     \"speed\": 7, #>     \"dist\": 22 #>   }, #>   { #>     \"speed\": 8, #>     \"dist\": 16 #>   }, #>   { #>     \"speed\": 9, #>     \"dist\": 10 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 18 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 26 #>   }, #>   { #>     \"speed\": 10, #>     \"dist\": 34 #>   }, #>   { #>     \"speed\": 11, #>     \"dist\": 17 #>   } #> ]   # creates an object with 2 arrays prep_object(cars_small) |>   jsonlite::toJSON(pretty = TRUE) #> { #>   \"speed\": [4, 4, 7, 7, 8, 9, 10, 10, 10, 11], #>   \"dist\": [2, 10, 4, 22, 16, 10, 18, 26, 34, 17] #> }   # this makes no difference x <- list(\"hello\" = 1:10, \"world\" = \"Earth\")  prep_object(x) |>   jsonlite::toJSON(pretty = TRUE) #> { #>   \"hello\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], #>   \"world\": [\"Earth\"] #> }"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare publication year items ‚Äî prep_publicationYear","title":"Prepare publication year items ‚Äî prep_publicationYear","text":"wrapper prep atomic","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare publication year items ‚Äî prep_publicationYear","text":"","code":"prep_publicationYear(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare publication year items ‚Äî prep_publicationYear","text":"x Named vector, data frame, list","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare publication year items ‚Äî prep_publicationYear","text":"unboxed dataframe 1 row","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_publicationYear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare publication year items ‚Äî prep_publicationYear","text":"","code":"pub_year <- data.frame(\"publicationYear\" = \"2025\")  prep_language(pub_year) #> [x] \"2025\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_relatedIdentifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare related identifiers ‚Äî prep_relatedIdentifiers","title":"Prepare related identifiers ‚Äî prep_relatedIdentifiers","text":"Prepare related identifiers","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_relatedIdentifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare related identifiers ‚Äî prep_relatedIdentifiers","text":"","code":"prep_relatedIdentifiers(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_relatedIdentifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare related identifiers ‚Äî prep_relatedIdentifiers","text":"x data frame related identifier properties","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_relatedIdentifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare related identifiers ‚Äî prep_relatedIdentifiers","text":"List x marked unbox","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_relatedIdentifiers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare related identifiers ‚Äî prep_relatedIdentifiers","text":"","code":"wddsWizard::becker_project_metadata$relatedIdentifiers |> prep_relatedIdentifiers() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 3 #>   relatedIdentifier                           relatedIdentifierType relationType #> * <chr>                                       <chr>                 <chr>        #> 1 https://pharos.viralemergence.org/projects‚Ä¶ URL                   IsVersionOf  #>  #> [[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 3 #>   relatedIdentifier         relatedIdentifierType relationType #> * <chr>                     <chr>                 <chr>        #> 1 10.3389/fviro.2022.862961 DOI                   IsPartOf     #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare rights ‚Äî prep_rights","title":"Prepare rights ‚Äî prep_rights","text":"Prepares array objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare rights ‚Äî prep_rights","text":"","code":"prep_rights(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare rights ‚Äî prep_rights","text":"x named list, vector, data.frame 1:1 name:value pairs","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare rights ‚Äî prep_rights","text":"list unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_rights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare rights ‚Äî prep_rights","text":"","code":"wddsWizard::becker_project_metadata$rights |> prep_rights() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 1 #>   rights #> * <chr>  #> 1 CC0    #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare subjects ‚Äî prep_subjects","title":"Prepare subjects ‚Äî prep_subjects","text":"Subjects keywords describing work. Prepares array objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare subjects ‚Äî prep_subjects","text":"","code":"prep_subjects(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare subjects ‚Äî prep_subjects","text":"x named list, vector, data.frame 1:1 name:value pairs","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare subjects ‚Äî prep_subjects","text":"list unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_subjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare subjects ‚Äî prep_subjects","text":"","code":"wddsWizard::becker_project_metadata$subjects |> prep_subjects() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 1 #>   subject    #> * <chr>      #> 1 Proteomics #>  #> [[2]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 1 #>   subject         #> * <chr>           #> 1 Immune Response #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Titles ‚Äî prep_titles","title":"Prepare Titles ‚Äî prep_titles","text":"Prepares array objects","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Titles ‚Äî prep_titles","text":"","code":"prep_titles(x)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Titles ‚Äî prep_titles","text":"x list tibbles/data frames tibble/data frame","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Titles ‚Äî prep_titles","text":"list single row unboxed data frames","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/prep_titles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Titles ‚Äî prep_titles","text":"","code":"wddsWizard::becker_project_metadata$titles |> prep_titles() #> [[1]] #> Warning: Setting row names on a tibble is deprecated. #> # A tibble: 1 √ó 1 #>   title                                                                        #> * <chr>                                                                        #> 1 Serum proteomics of coronavirus shedding in vampire bats (Desmodus rotundus) #>"},{"path":"https://viralemergence.github.io/wddsWizard/reference/process_array_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Array Items ‚Äî process_array_items","title":"Process Array Items ‚Äî process_array_items","text":"Processes array items can added data frame.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/process_array_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Array Items ‚Äî process_array_items","text":"","code":"process_array_items(array_items, out)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/process_array_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Array Items ‚Äî process_array_items","text":"array_items list. List array items processing. data frame. Data frame name type.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/process_array_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Array Items ‚Äî process_array_items","text":"data frames name type array items objects character strings atomic (string, null, Boolean, etc) array items.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/project_metadata_required_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Required fields in the project metadata object ‚Äî project_metadata_required_fields","title":"Required fields in the project metadata object ‚Äî project_metadata_required_fields","text":"See data standard JSON file field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/project_metadata_required_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required fields in the project metadata object ‚Äî project_metadata_required_fields","text":"","code":"project_metadata_required_fields"},{"path":"https://viralemergence.github.io/wddsWizard/reference/project_metadata_required_fields.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Required fields in the project metadata object ‚Äî project_metadata_required_fields","text":"object class character length 7.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/project_metadata_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Wildlife Disease Data Standard - project_metadata ‚Äî project_metadata_schema","title":"Wildlife Disease Data Standard - project_metadata ‚Äî project_metadata_schema","text":"See data standard JSON file field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/project_metadata_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wildlife Disease Data Standard - project_metadata ‚Äî project_metadata_schema","text":"","code":"project_metadata_schema"},{"path":"https://viralemergence.github.io/wddsWizard/reference/project_metadata_schema.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wildlife Disease Data Standard - project_metadata ‚Äî project_metadata_schema","text":"object class list length 6.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/sanitize_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitize version ids ‚Äî sanitize_version","title":"Sanitize version ids ‚Äî sanitize_version","text":"function replaces periods scores. different versions data standard stored folders respective names; however, periods folder names can cause problems certain operating systems makes difficult parse file extensions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/sanitize_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitize version ids ‚Äî sanitize_version","text":"","code":"sanitize_version(version)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/sanitize_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitize version ids ‚Äî sanitize_version","text":"version Character. Version identifier.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/sanitize_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanitize version ids ‚Äî sanitize_version","text":"Character. Version identifier periods.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/sanitize_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sanitize version ids ‚Äî sanitize_version","text":"","code":"sanitize_version(\"v.1.1.0\") #> [1] \"v_1_1_0\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Wildlife Disease Data Standard - schema properties ‚Äî schema_properties","title":"Wildlife Disease Data Standard - schema properties ‚Äî schema_properties","text":"data frame schema names types.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wildlife Disease Data Standard - schema properties ‚Äî schema_properties","text":"","code":"schema_properties"},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_properties.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wildlife Disease Data Standard - schema properties ‚Äî schema_properties","text":"object class data.frame 78 rows 4 columns.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_required_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Wildlife Disease Data Standard required fields ‚Äî schema_required_fields","title":"Wildlife Disease Data Standard required fields ‚Äî schema_required_fields","text":"See data standard JSON file field descriptions. vector required fields entire schema.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_required_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wildlife Disease Data Standard required fields ‚Äî schema_required_fields","text":"","code":"schema_required_fields"},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_required_fields.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wildlife Disease Data Standard required fields ‚Äî schema_required_fields","text":"object class character length 2.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Wildlife Disease Data Standard - schema terms ‚Äî schema_terms","title":"Wildlife Disease Data Standard - schema terms ‚Äî schema_terms","text":"Markdown schema terms","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wildlife Disease Data Standard - schema terms ‚Äî schema_terms","text":"","code":"schema_terms"},{"path":"https://viralemergence.github.io/wddsWizard/reference/schema_terms.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wildlife Disease Data Standard - schema terms ‚Äî schema_terms","text":"object class character length 1.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/set_wdds_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the wdds version for the package ‚Äî set_wdds_version","title":"Set the wdds version for the package ‚Äî set_wdds_version","text":"Used keep package data standard alignment.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/set_wdds_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the wdds version for the package ‚Äî set_wdds_version","text":"","code":"set_wdds_version(version = \"latest\")"},{"path":"https://viralemergence.github.io/wddsWizard/reference/set_wdds_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the wdds version for the package ‚Äî set_wdds_version","text":"version Character. identifier version e.g. \"v.1.0.2\" \"latest\"","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/set_wdds_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the wdds version for the package ‚Äî set_wdds_version","text":"Character. Current schema version.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/use_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a wildlife disease data standard template ‚Äî use_template","title":"Use a wildlife disease data standard template ‚Äî use_template","text":"function allows easily copy open template package.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/use_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a wildlife disease data standard template ‚Äî use_template","text":"","code":"use_template(   template_file = NULL,   folder = fs::path_wd(),   file_name = NULL,   open = rlang::is_interactive(),   overwrite = FALSE )"},{"path":"https://viralemergence.github.io/wddsWizard/reference/use_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a wildlife disease data standard template ‚Äî use_template","text":"template_file character. File name template. folder character. template copied ? Default current working directory. file_name character. copied file called? Default use whatever value supplied template_file. open logical. file opened? overwrite logical. file name destination folder overwritten?","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/use_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use a wildlife disease data standard template ‚Äî use_template","text":"Character. template_file value provided, lists template files package. file created, returns file path new file.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/use_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a wildlife disease data standard template ‚Äî use_template","text":"","code":"if (FALSE) { # \\dontrun{ # makes a copy of the disease data template in the current working directory use_template(\"disease_data_template.csv\") } # }"},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_data_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides Access to Versioned Data Template Files ‚Äî wdds_data_templates","title":"Provides Access to Versioned Data Template Files ‚Äî wdds_data_templates","text":"Since schema versions may change life cycle project, important users access schema versions via package. function allows quickly retrieve whichever version data templates may need.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_data_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides Access to Versioned Data Template Files ‚Äî wdds_data_templates","text":"","code":"wdds_data_templates(version = NULL, file = NULL)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_data_templates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides Access to Versioned Data Template Files ‚Äî wdds_data_templates","text":"version Character. Version wdds deposit. Leave NULL see versions. file Character. Specific file wdds deposit. Leave NULL see files version.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_data_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provides Access to Versioned Data Template Files ‚Äî wdds_data_templates","text":"Character. Either version identifiers file paths.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_data_templates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provides Access to Versioned Data Template Files ‚Äî wdds_data_templates","text":"function three things. Shows versions schema package, Provides paths example data files associated version schema Provides specific file path specific version example data","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_data_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides Access to Versioned Data Template Files ‚Äî wdds_data_templates","text":"","code":"# see which versions are in the package  wdds_data_templates() #> The following versions of the standard are availble in the package: #>         -  latest #>         -  v_1_0_0 #>         -  v_1_0_1 #>         -  v_1_0_2 #>         -  v_1_0_3 #> [1] \"latest\"  \"v_1_0_0\" \"v_1_0_1\" \"v_1_0_2\" \"v_1_0_3\"  # see files associated with a version  wdds_data_templates(version = \"latest\") #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/data_templates/disease_data_template.csv #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/data_templates/disease_data_template.xlsx #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/data_templates/project_metadata_template.csv  # get the file path for a specific file  wdds_data_templates(version = \"v_1_0_2\",file = \"disease_data_template.csv\") #> [1] \"/home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/v_1_0_2/data_templates/disease_data_template.csv\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides Access to Versioned Example Data Files ‚Äî wdds_example_data","title":"Provides Access to Versioned Example Data Files ‚Äî wdds_example_data","text":"Since schema versions may change life cycle project, important users access schema versions via package. function allows quickly retrieve whichever version example data may need.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides Access to Versioned Example Data Files ‚Äî wdds_example_data","text":"","code":"wdds_example_data(version = NULL, file = NULL)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides Access to Versioned Example Data Files ‚Äî wdds_example_data","text":"version Character. Version wdds deposit. Leave NULL see versions. file Character. Specific file wdds deposit. Leave NULL see files version.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provides Access to Versioned Example Data Files ‚Äî wdds_example_data","text":"Character. Either version identifiers file paths.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_example_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provides Access to Versioned Example Data Files ‚Äî wdds_example_data","text":"function three things. Shows versions schema package, Provides paths example data files associated version schema Provides specific file path specific version example data","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_example_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides Access to Versioned Example Data Files ‚Äî wdds_example_data","text":"","code":"# see which versions are in the package  wdds_example_data() #> The following versions of the standard are availble in the package: #>         -  latest #>         -  v_1_0_0 #>         -  v_1_0_1 #>         -  v_1_0_2 #>         -  v_1_0_3 #> [1] \"latest\"  \"v_1_0_0\" \"v_1_0_1\" \"v_1_0_2\" \"v_1_0_3\"  # see files associated with a version  wdds_example_data(version = \"latest\") #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/example_data/Becker_demo_dataset.xlsx #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/example_data/becker_project_metadata.csv #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/example_data/example_project_metadata.csv #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/example_data/minimal_example.json #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/example_data/minimal_example_disease_data.csv #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/example_data/minimal_example_project_metadata.csv #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/example_data/my_interesting_disease_data.csv #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/example_data/my_project_metadata.csv  # get the file path for a specific file  wdds_example_data(version = \"v_1_0_2\",file = \"Becker_demo_dataset.xlsx\") #> [1] \"/home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/v_1_0_2/example_data/Becker_demo_dataset.xlsx\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides Access to Versioned Schema Files ‚Äî wdds_json","title":"Provides Access to Versioned Schema Files ‚Äî wdds_json","text":"Since schema versions may change life cycle project, important users access schema versions via package. function allows quickly retrieve whichever schema version may need.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides Access to Versioned Schema Files ‚Äî wdds_json","text":"","code":"wdds_json(version = NULL, file = NULL)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides Access to Versioned Schema Files ‚Äî wdds_json","text":"version Character. Version wdds deposit. Leave NULL see versions. file Character. Specific file wdds deposit. Leave NULL see files version.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provides Access to Versioned Schema Files ‚Äî wdds_json","text":"Character. Either version identifiers file paths.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_json.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Provides Access to Versioned Schema Files ‚Äî wdds_json","text":"function three things. Shows versions schema package, Provides paths schema files associated version schema Provides specific file path specific version schema.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides Access to Versioned Schema Files ‚Äî wdds_json","text":"","code":"# see which versions are in the package  wdds_json() #> The following versions of the standard are availble in the package: #>         -  latest #>         -  v_1_0_0 #>         -  v_1_0_1 #>         -  v_1_0_2 #>         -  v_1_0_3 #> [1] \"latest\"  \"v_1_0_0\" \"v_1_0_1\" \"v_1_0_2\" \"v_1_0_3\"  # see files associated with a version  wdds_json(version = \"latest\") #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/wdds_schema/schemas #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/wdds_schema/schemas/datacite #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/wdds_schema/schemas/datacite/datacite-v4.5.json #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/wdds_schema/schemas/disease_data.json #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/wdds_schema/schemas/project_metadata.json #> /home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/latest/wdds_schema/wdds_schema.json  # get the file path for a specific file  wdds_json(version = \"v_1_0_2\",file = \"schemas/disease_data.json\") #> [1] \"/home/runner/work/_temp/Library/wddsWizard/extdata/wdds_archive/v_1_0_2/wdds_schema/schemas/disease_data.json\""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Wildlife Disease Data Standard ‚Äî wdds_schema","title":"Wildlife Disease Data Standard ‚Äî wdds_schema","text":"See data standard JSON file field descriptions.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wildlife Disease Data Standard ‚Äî wdds_schema","text":"","code":"wdds_schema"},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_schema.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wildlife Disease Data Standard ‚Äî wdds_schema","text":"object class list length 6.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_template.html","id":null,"dir":"Reference","previous_headings":"","what":"File paths for wdds templates ‚Äî wdds_template","title":"File paths for wdds templates ‚Äî wdds_template","text":"Displays file paths Wildlife Disease Data Standard templates","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File paths for wdds templates ‚Äî wdds_template","text":"","code":"wdds_template(template_file = NULL)"},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File paths for wdds templates ‚Äî wdds_template","text":"template_file character. file name template","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File paths for wdds templates ‚Äî wdds_template","text":"file paths , path = NULL, list file names","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File paths for wdds templates ‚Äî wdds_template","text":"path null, displays files templates folder.","code":""},{"path":"https://viralemergence.github.io/wddsWizard/reference/wdds_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File paths for wdds templates ‚Äî wdds_template","text":"","code":"wdds_template() #> [1] \"disease_data_template.csv\"     \"disease_data_template.xlsx\"    #> [3] \"project_metadata_template.csv\""},{"path":"https://viralemergence.github.io/wddsWizard/news/index.html","id":"wddswizard-002","dir":"Changelog","previous_headings":"","what":"wddsWizard 0.0.2","title":"wddsWizard 0.0.2","text":"using wdds_* functions users can use different schema versions access files versions quickly. helpful built system use data standard version 1.0.0 standard progressed 1.0.2. made improvements re-build process make updating package easier. added version archive avialable files","code":""},{"path":"https://viralemergence.github.io/wddsWizard/news/index.html","id":"wddswizard-001","dir":"Changelog","previous_headings":"","what":"wddsWizard 0.0.1","title":"wddsWizard 0.0.1","text":"Dropping healthNotes recommended field","code":""}]
